<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.sporule.com/</id>
    <title>Sporule</title>
    <updated>2020-04-15T16:24:03.958Z</updated>
    <generator>Sporule</generator>
    <author>
        <name>Sporule</name>
        <email>example@example.com</email>
        <uri>https://www.sporule.com</uri>
    </author>
    <link rel="alternate" href="https://www.sporule.com/"/>
    <subtitle>Sporule is a micro blog site</subtitle>
    <logo>https://i.imgur.com/vfh3Une.png</logo>
    <icon>https://i.imgur.com/vfh3Une.png</icon>
    <rights>All rights reserved 2019, Sporule</rights>
    <entry>
        <title type="html"><![CDATA[HIVE - UNABLE TO INSTANTIATE META STORE CLIENT ]]></title>
        <id>https://www.sporule.com/items/hive-unable-to-instantiate-metastore-client</id>
        <link href="https://www.sporule.com/items/hive-unable-to-instantiate-metastore-client"/>
        <updated>2020-04-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I use docker compose to build my Hadoop cluster, and Hive is one of the component. I received error message:

```bash

HiveException java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient

```



I started hive with a debug ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://imgix.datadoghq.com/img/blog/hive/apache_hive_hero_final-01.png" alt="coverimage"></p>
<h2>Problem</h2>
<p>I use docker compose to build my Hadoop cluster, and Hive is one of the component. I received error message:</p>
<pre><code class="language-bash">
HiveException java.lang.RuntimeException: Unable to instantiate org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient

</code></pre>
<h2>Diagnose</h2>
<p>I started hive with a debug mode by using:</p>
<pre><code class="language-bash">hive -hiveconf hive.root.logger=DEBUG,console
</code></pre>
<p>It returns error message:</p>
<pre><code class="language-bash"> ERROR utils.MetaStoreUtils: Got exception: java.net.URISy
ntaxException Illegal character in hostname at index 37: thrift://hive-metastore.docker-hadoop_default:9083

Caused by: MetaException(message:Got exception: java.net.URISyntaxException Illegal character in hostname at index 37: thrift://hive-metastore.docker-hadoop_default:9083)
</code></pre>
<p>It looks like the system complained about the hostname  thrift://hive-metastore.docker-hadoop_default:9083.
I did some Google and the system does not live the character &quot;_&quot;</p>
<h2>Solution</h2>
<p>The hostname was auto generated by Docker Compose, so I need to change the default name explicitly.
Docker Compose use yml to config, what we need to do is to ensure we are using docker compose yml version 3.5 or above.
You can change the version by using:</p>
<pre><code class="language-bash">version: &quot;3.5&quot;
</code></pre>
<p>And then set default network by using:</p>
<pre><code class="language-bash">networks:
  default:
     name: newnetworkname
</code></pre>
<p>After updating the yml file everything works fine now</p>
<pre><code class="language-bash">Hive Session ID = 5d4e4c64-dd7b-4c09-b000-7a2675d27ead
Hive-on-MR is deprecated in Hive 2 and may not be available in the future versions. Consider using a different execution engine (i.e. spark, tez) or using Hive 1.X releases.
hive&gt; show databases;
OK
default
Time taken: 1.021 seconds, Fetched: 1 row(s)
hive&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SPARK ON YARN ERROR - FAILD TO SEND RPC ]]></title>
        <id>https://www.sporule.com/items/spark-on-yarn-error-failed-to-send-rpc</id>
        <link href="https://www.sporule.com/items/spark-on-yarn-error-failed-to-send-rpc"/>
        <updated>2020-04-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I am new to the big data world, and I am trying to build a Hadoop cluster by using docker. The spark shell did not work with the error message ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Apache_Spark_logo.svg/1920px-Apache_Spark_logo.svg.png" alt="coverimage"></p>
<h2>Problem</h2>
<p>I am new to the big data world, and I am trying to build a Hadoop cluster by using docker. The spark shell did not work with the error message below:</p>
<pre><code class="language-bash">
Failed to send RPC 4858956348523471318 to /10.20.42.194:54288: java.nio.channels.ClosedChannelException

cluster.YarnSchedulerBackend$YarnSchedulerEndpoint: Sending RequestExecutors(0,0,Map()) to AM was unsuccessful

</code></pre>
<h2>Diagnose</h2>
<p>The problem looks like it can't connect to the ip address, so I start with testing the connection between spark to the ip address.
The ping went through without problems.</p>
<p>Then I look at yarn to see if I can find any logs there, I discovered the error messages below:</p>
<pre><code class="language-bash">
Application application_1586040841405_0002 failed 2 times due to AM Container for appattempt_1586040841405_0002_000002 exited with exitCode: -103
Failing this attempt.Diagnostics: [2020-04-04 22:56:04.466]Container [pid=648,containerID=container_e08_1586040841405_0002_02_000001] is running 71436800B beyond the 'VIRTUAL' memory limit. Current usage: 260.6 MB of 1 GB physical memory used; 2.2 GB of 2.1 GB virtual memory used. Killing container.
Dump of the process-tree for container_e08_1586040841405_0002_02_000001 :
|- PID PPID PGRPID SESSID CMD_NAME USER_MODE_TIME(MILLIS) SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) RSSMEM_USAGE(PAGES) FULL_CMD_LINE
|- 657 648 648 648 (java) 598 146 2305732608 66012 /usr/lib/jvm/java-8-openjdk-amd64//bin/java -server -Xmx512m -Djava.io.tmpdir=/tmp/hadoop-root/nm-local-dir/usercache/root/appcache/application_1586040841405_0002/container_e08_1586040841405_0002_02_000001/tmp -Dspark.yarn.app.container.log.dir=/opt/hadoop-3.1.1/logs/userlogs/application_1586040841405_0002/container_e08_1586040841405_0002_02_000001 org.apache.spark.deploy.yarn.ExecutorLauncher --arg a7dc3af52bc9:37231 --properties-file /tmp/hadoop-root/nm-local-dir/usercache/root/appcache/application_1586040841405_0002/container_e08_1586040841405_0002_02_000001/__spark_conf__/__spark_conf__.properties
|- 648 646 648 648 (bash) 0 0 20561920 698 /bin/bash -c /usr/lib/jvm/java-8-openjdk-amd64//bin/java -server -Xmx512m -Djava.io.tmpdir=/tmp/hadoop-root/nm-local-dir/usercache/root/appcache/application_1586040841405_0002/container_e08_1586040841405_0002_02_000001/tmp -Dspark.yarn.app.container.log.dir=/opt/hadoop-3.1.1/logs/userlogs/application_1586040841405_0002/container_e08_1586040841405_0002_02_000001 org.apache.spark.deploy.yarn.ExecutorLauncher --arg 'a7dc3af52bc9:37231' --properties-file /tmp/hadoop-root/nm-local-dir/usercache/root/appcache/application_1586040841405_0002/container_e08_1586040841405_0002_02_000001/__spark_conf__/__spark_conf__.properties 1&gt; /opt/hadoop-3.1.1/logs/userlogs/application_1586040841405_0002/container_e08_1586040841405_0002_02_000001/stdout 2&gt; /opt/hadoop-3.1.1/logs/userlogs/application_1586040841405_0002/container_e08_1586040841405_0002_02_000001/stderr
[2020-04-04 22:56:04.519]Container killed on request. Exit code is 143
[2020-04-04 22:56:04.549]Container exited with a non-zero exit code 143.
For more detailed output, check the application tracking page: http://historyserver:8188/applicationhistory/app/application_1586040841405_0002 Then click on links to logs of each attempt.
. Failing the application.

</code></pre>
<p>It looks obvious that the job containers were killed because the virtual memory usage exceed the allocated virtual memory error message. As a result, I need to increased the virtual memory.</p>
<h2>Solution</h2>
<p>I found out from official document that there is a property call <strong>yarn.nodemanager.vmem-pmem-ratio</strong> that controls the ratio between physical memory and virtual memory. This configuration is under <strong>/etc/hadoop/yarn-site.xml</strong>.</p>
<p>The default value is 2.1 so I have changed it to 10 because my Azure machine has only 8GB of RAM.</p>
<p>I believe the side affect is the execution of job will be slower because it is using virtual memory, which sounds like the hard disks rather than the memory.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DEFINE OUTPUT COLUMN IN FLASK-SQLALCHEMY]]></title>
        <id>https://www.sporule.com/items/define-output-column-in-flask-sqlalchemy</id>
        <link href="https://www.sporule.com/items/define-output-column-in-flask-sqlalchemy"/>
        <updated>2019-11-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I am writing a Web API in python for a general purpose CMS by using Flask + Flask - SqlAlchemy. It is very easy to use but it does not ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRilFX9Kg2VGgC02Fy6ILT5PKamAfygZnD6XsqahK4zwHY80M9f2w&amp;s" alt="coverimage"></p>
<h2>The background</h2>
<p>I am writing a Web API in python for a general purpose CMS by using Flask + Flask - SqlAlchemy. It is very easy to use but it does not provide a native way to declare what should be the output colums. This function is very useful as I don't want to pass everything to the client.</p>
<h2>What we want to achieve</h2>
<p>We want to be able to output selected columns from a SQLAlchemy object as dictionary, the reason we are outputing it as dictionary is because Flask can't jsonify the SQLAlchemy Object directly.</p>
<h2>Implementation</h2>
<p>In Golang with MongoDB, it can set <code>json:&quot;-&quot;</code> to columns to omit columns that you don't want to output. In below example, the Password and TokenSalt will be omitted if we run a json export.</p>
<pre><code class="language-go">type User struct {
    ID               bson.ObjectId          `bson:&quot;_id,omitempty&quot; json:&quot;_id,omitempty&quot;`
    Email            string                 `bson:&quot;email,omitempty&quot; json:&quot;email,omitempty&quot;`
	Password         string                 `bson:&quot;password,omitempty&quot; json:&quot;-&quot;`
	TokenSalt        string                 `bson:&quot;tokenSalt,omitempty&quot; json:&quot;-&quot;`
	CreatedDate      time.Time              `bson:&quot;createdDate,omitempty&quot; json:&quot;createdDate,omitempty&quot;`
	ModifiedDate     time.Time              `bson:&quot;modeifiedDate,omitempty&quot; json:&quot;modeifiedDate,omitempty&quot;`
}
</code></pre>
<p>I am trying to follow the same method in python but I don't know how to declare extra properties in the column, so I used a very simple way to do that by adding a property call output_column in python.</p>
<p>For example we have a User and Role class with Mixin class, please check SQLAlchemy documentation first if you are not familiar with it.</p>
<blockquote>
<p>The old code:</p>
</blockquote>
<pre><code class="language-python">
class DBMixin():
    id = db.Column(db.Integer, primary_key=True)
    created_time = db.Column(db.DateTime, server_default=db.func.now())
    modified_time = db.Column(
        db.DateTime, server_default=db.func.now(), onupdate=db.func.now())

    def insert(self):
        db.session.add(self)
        db.session.commit()

    def delete(self):
        db.session.delete(self)
        db.session.commit()


class User(db.Model,DBMixin):
    __tablename__ = 'user'
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    role_id = db.Column(db.Integer, db.ForeignKey('role.id'),default = 1)
    articles = db.relationship('Article', backref='user', lazy='dynamic')
    orders = db.relationship('Order', backref='user', lazy='dynamic')

class Role(db.Model,DBMixin):
    __tablename__ = 'role'
    name = db.Column(db.String(50), unique=True, nullable=False)
    users = db.relationship('User', backref='role', lazy='dynamic')

    def __init__(self, name):
        self.name = name

</code></pre>
<blockquote>
<p>The new code with output as dict:</p>
</blockquote>
<pre><code class="language-python">
class DBMixin():
    id = db.Column(db.Integer, primary_key=True)
    created_time = db.Column(db.DateTime, server_default=db.func.now())
    modified_time = db.Column(
        db.DateTime, server_default=db.func.now(), onupdate=db.func.now())
    output_column = [] # Added output_column

    def insert(self):
        db.session.add(self)
        db.session.commit()

    def delete(self):
        db.session.delete(self)
        db.session.commit()

    def as_dict(self, output_column=[]):
        &quot;&quot;&quot;
        Added as_dict function
        &quot;&quot;&quot;
        output = {}
        # Use default self.output_column if output_column is empty
        output_column = output_column if len(
            output_column) &gt; 0 else self.output_column
        # Use all columns if self.output_column is empty
        output_column = output_column if len(output_column) &gt; 0 else [
            c.name for c in self.__table__.columns]
        for column in output_column:
            column_list = column.split('.')
            if len(column_list) &gt; 1:
                value  = self
                for x in range(0,len(column_list)):
                    # This is for to cope with the different level. For example I can output the role of the user by passing &quot;role.name&quot;, it can be multiple level
                    if hasattr(value,column_list[x]):
                        value = getattr(value,column_list[x])
                    else:
                        value = ''
                        break
                output[column] = str(value)
                continue
            # Simple output if the column is in the class itself
            output[column] = str(getattr(self, column))
        return output

class User(db.Model,DBMixin):
    __tablename__ = 'user'
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    role_id = db.Column(db.Integer, db.ForeignKey('role.id'),default = 1)
    articles = db.relationship('Article', backref='user', lazy='dynamic')
    orders = db.relationship('Order', backref='user', lazy='dynamic')
    output_columns = ['email','role.name']

class Role(db.Model,DBMixin):
    __tablename__ = 'role'
    name = db.Column(db.String(50), unique=True, nullable=False)
    users = db.relationship('User', backref='role', lazy='dynamic')

    def __init__(self, name):
        self.name = name

</code></pre>
<p>As you can see above, I have added an attribute <code>output_columns</code>.  This is to define the default output_columns. This can be overrided in the individual class, I have done that for User class.</p>
<p>I have also added a function <code>as_dict</code>. It accepts on variable <code>output_columns</code> in case if different function want to override the default one. So the priority of the <code>output_columns</code> is:</p>
<blockquote>
<p><code>passed in to function</code> &gt; <code>declared in the class</code> &gt; <code>declared in the mixin class</code> &gt; <code>all columns in the class</code></p>
</blockquote>
<p>It also supports multilevel output, for example we want to export both email address and the name of the User Role. What we need to do is simple put <code>'role.name'</code> inside the output_columns. I have added the specific <code>output_columns</code> in User class above, and below is the expected output after running the as_dict():</p>
<pre><code class="language-python">[
  {
    &quot;email&quot;: &quot;abc@gmail.com&quot;, 
    &quot;role.name&quot;: &quot;member&quot;
  }, 
  {
    &quot;email&quot;: &quot;abcd@gmail.com&quot;, 
    &quot;role.name&quot;: &quot;admin&quot;
  }
]

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[BUILD AN AMAZON ALEXA SKILLS IN 10 MINUTES AND GET FREE ECHO]]></title>
        <id>https://www.sporule.com/items/build-an-amazon-alexa-skills-in-10-minutes-and-get-free-echo</id>
        <link href="https://www.sporule.com/items/build-an-amazon-alexa-skills-in-10-minutes-and-get-free-echo"/>
        <updated>2019-10-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This guide is going to show you how to build an Amazon Alexa Skills in 10 minutes by using python, aws and an information api.

In addition, Amazon is currently running ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/zt5JIa3.png" alt="coverimage"></p>
<h2>Background</h2>
<p>This guide is going to show you how to build an Amazon Alexa Skills in 10 minutes by using python, aws and an information api.</p>
<p>In addition, Amazon is currently running a promotion for giving out Echo for free. In summary:</p>
<ul>
<li>Publish your very first, new Alexa skill during the promotion period and earn an Amazon Echo Dot.</li>
<li>Publish three new Alexa skills during the promotion period, where one of them is used by at least 75 unique users during the promotion period, and earn an Echo Show 5 voucher.</li>
<li>Add the Alexa Presentation Language to one of your skills (newly published or updated) during the promotion period and reach at least 150 unique users during the promotion period, and you will earn an Amazon Echo Show.</li>
</ul>
<p>Find more details <a href="https://developer.amazon.com/en-GB/alexa/alexa-skills-kit/alexa-developer-skill-promotion">here</a></p>
<h2>What is the final product look like</h2>
<p>To see what the final product look like, you will need to download the Alexa app and enable the skill <a href="https://www.amazon.co.uk/dp/B07ZCVCK8F/ref=sr_1_3?keywords=joke+teller&amp;qid=1571692557&amp;s=digital-skills&amp;sr=1-3"><strong>Joke Teller</strong></a></p>
<p><img src="https://i.imgur.com/zt5JIa3.png" alt="20191021221611.png"></p>
<p>To Test it, simply say:</p>
<ul>
<li>'Alexa, ask joke teller to tell me a joke'</li>
<li>'Alexa, ask joke teller to give me something fun'</li>
</ul>
<p>It will return you a random joke.</p>
<h2>Prerequisite Knowledge</h2>
<ul>
<li>Good understand on English</li>
<li>Good knowledge on using a web browser (Chrome, Safari or Firefox)</li>
</ul>
<h2>Guideline</h2>
<h3>Pick an API you want to use</h3>
<p>Go through the API list in <a href="https://www.programmableweb.com/category/humor/api">this link</a>, I will suggest to start from a simple api that returns a sequence.
I have picked the <a href="https://icanhazdadjoke.com/api">icanhazdadjoke</a> api which will randomly return a joke, so my app name will be joke teller.</p>
<h3>Register an Amazon developer account</h3>
<p>Click <a href="https://developer.amazon.com/alexa/console/ask">this link</a> for registration, fill in required information.
You can use your Amazon account to log in.</p>
<h3>Register to the Amazon Free Echo Promotion</h3>
<p>Go to <a href="https://developer.amazon.com/en-GB/alexa/alexa-skills-kit/alexa-developer-skill-promotion">here</a> and fill the promotion form.</p>
<h3>Create your first skill</h3>
<p>After login to your development account ,go to <a href="https://developer.amazon.com/alexa/console/ask">this link</a>.</p>
<p>You will see something like this, click Create Skill:</p>
<p><img src="https://i.imgur.com/B6dOjzA.png" alt="20191021213921.png"></p>
<p>Fill in the required information:</p>
<ul>
<li>The name of your skill</li>
<li>Use Custom Model to build the skill</li>
<li>Use Alexa-Hosted(Python) as backend resources which is free in the AWS</li>
</ul>
<p><img src="https://i.imgur.com/6GQvQ5f.png" alt="20191021214205.png"></p>
<p>Now you need to set up your Invocation name, which is the name that will active your skill. The name I used here is &quot;joke teller&quot;</p>
<p><img src="https://i.imgur.com/IzYaZ1K.png" alt="20191021215011.png"></p>
<p>After setting the Invocation name, we will need to set up the Intent. Add a new intent with a name. I used the name joke. Intent is something that will response the user's query. As we are only building a simple skill, so we only have one intent without any slots. Examples intent:</p>
<ul>
<li>Give me some fun</li>
<li>Make me laugh</li>
</ul>
<p><img src="https://i.imgur.com/xjre1Ol.png" alt="20191021215141.png"></p>
<p>After adding few intents, you need to click save model and then build model.</p>
<p><img src="https://i.imgur.com/P06svRf.png" alt="20191021215637.png"></p>
<p>Congratulations, you are almost there.</p>
<p>Now go to Code section -&gt; Open lambda_function, and copy and paste below code to an empty space, change the &quot;joke&quot; to the name of  your intent:</p>
<pre><code class="language-python">class jokeIntentHandler(AbstractRequestHandler):
    &quot;&quot;&quot;Handler for shouldI.&quot;&quot;&quot;
    def can_handle(self, handler_input):
        # type: (HandlerInput) -&gt; bool
        return ask_utils.is_intent_name(&quot;joke&quot;)(handler_input)

    def handle(self, handler_input):
        # type: (HandlerInput) -&gt; Response
        speak_output =  requests.get(&quot;https://icanhazdadjoke.com/&quot;, headers={&quot;Accept&quot;:&quot;text/plain&quot;}).text
        return (
            handler_input.response_builder
                .speak(speak_output)
                # .ask(&quot;add a reprompt if you want to keep the session open for the user to respond&quot;)
                .response
        )
</code></pre>
<p>This code basically returns a random joke by calling the joke api we just pciked.</p>
<p><img src="https://i.imgur.com/0EV8K5S.png" alt="20191021215925.png"></p>
<p>It is also worth changing any wording you want to change, I believe you can understand this easily.</p>
<p><img src="https://i.imgur.com/X4WCsZF.png" alt="20191021220236.png"></p>
<p>Finally, add below code at the end of the section, then click Save and Deploy</p>
<pre><code class="language-python">
sb.add_request_handler(jokeIntentHandler())

</code></pre>
<p><img src="https://i.imgur.com/FSMwb8V.png" alt="20191021220407.png"></p>
<p>You can now test your skill in the test tab to make sure it works.
In my scenario, I can say:</p>
<blockquote>
<p>&quot;ask joke teller to make me laugh&quot;</p>
</blockquote>
<p><img src="https://i.imgur.com/Bv6xBge.png" alt="20191021220729.png"></p>
<h3>Publish Your Skill</h3>
<p>Now we can start to publish our skill, go to distribution and fill the basic information.</p>
<p><img src="https://i.imgur.com/MvyIGkN.png" alt="20191021220849.png"></p>
<p>One thing needs to be careful is the Example Phrases, you will need to make sure the example phrases are in your intent. For example if your intents are:</p>
<ul>
<li>Give me some fun</li>
<li>Make me laugh</li>
</ul>
<p>Then your example phrases can be one or both of below:</p>
<ul>
<li>Alexa, ask joke teller to make me laugh</li>
<li>Alexa, ask joke teller to make me laugh</li>
</ul>
<p>Save and Continue when everything is ready, you will also need to fill in both Privacy Section and Availability.</p>
<p>Please use the same example phrases as testing instructions in Privacy Section.</p>
<p><img src="https://i.imgur.com/x7R431B.png" alt="20191021221836.png"></p>
<p>Go to Certification after completing the whole distribution section, Run both Validation Test and Functional test to make sure everything is OK.</p>
<p><img src="https://i.imgur.com/MLCblI5.png" alt="20191021221247.png"></p>
<p>And then go to Submission to Submit the skill, you skill will be in the Alexa Skill store after few days.</p>
<p><img src="https://i.imgur.com/tWJqbt1.png" alt="20191021221330.png"></p>
<h2>Summary</h2>
<p>As you can see it is very simple to create the simple skill, you can be flexible on any of the API to make your skill more fun. According to the terms, you will receive your echo dot in 60 days.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RELEASE OF THE FIRST VERSION OF SPORULE BLOGGING SYSTEM]]></title>
        <id>https://www.sporule.com/items/released-first-version-of-sporule-blog-system</id>
        <link href="https://www.sporule.com/items/released-first-version-of-sporule-blog-system"/>
        <updated>2019-10-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is the pure front end system I mentioned in my previous posts, although it is not perfect yet, but I still want to release it out because the core ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/CRKGEJk.png" alt="coverimage"></p>
<h2>Background</h2>
<p>This is the pure front end system I mentioned in my previous posts, although it is not perfect yet, but I still want to release it out because the core functionality is ready.</p>
<h2>Features</h2>
<ul>
<li>Easy to use, create your blog in less than 10 minutes.</li>
<li>Pure front end + Markdown, no server side code.</li>
<li>Multi-platform support - github pages, netlify and any other cloud platform.</li>
<li>Progressive Web App Support Ready, it can be added to iPhone or Android as an app. All posts can be cahced.</li>
<li>Theme system which means you can switch to the themes you like through github submodules.</li>
<li>Seperating the site and the content as it renders the markdown on the fly.</li>
<li>Rich meta data through Front Matter.</li>
</ul>
<h2>Quick Start - Set up</h2>
<h3>Fork This Repo to your GitHub Account</h3>
<p><img src="https://i.imgur.com/VSqrEHf.png" alt="Fork"></p>
<h3>Update the Configuration Files</h3>
<h4>General Configuration File</h4>
<p>_config.js is the configuration file for your site.</p>
<p><img src="https://i.imgur.com/9Rl3J3B.png" alt="Config"></p>
<p><strong>Available Configs:</strong></p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Value</th>
<th>Example</th>
<th>Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>Site</td>
<td>The name of the site</td>
<td>&quot;Sporule&quot;</td>
<td>string</td>
</tr>
<tr>
<td>url</td>
<td>The link to your site</td>
<td>&quot;https://www.sporule.com&quot;</td>
<td>string</td>
</tr>
<tr>
<td>description</td>
<td>short description about your site</td>
<td>&quot;Sporule is a micro blog system&quot;</td>
<td>string</td>
</tr>
<tr>
<td>keywords</td>
<td>keywords for SEO purpose</td>
<td>&quot;blog,post&quot;</td>
<td>string</td>
</tr>
<tr>
<td>logo</td>
<td>The logo</td>
<td>&quot;https://i.imgur.com/MrRLOC4.png&quot;</td>
<td>string</td>
</tr>
<tr>
<td>disqusShortname</td>
<td>Disqus is a comment system, you will get a shortname after having an account with them</td>
<td>NA</td>
<td>string</td>
</tr>
<tr>
<td>postPerPage</td>
<td>How many posts do you want to show per page?</td>
<td>8</td>
<td>int</td>
</tr>
<tr>
<td>googleAnaltics</td>
<td>Google Analytics Tag if you are using Google analytics</td>
<td>UA-11402457-1</td>
<td>string</td>
</tr>
<tr>
<td>alwaysRefreshPost</td>
<td>The system will always get the latest content of the post rather than using the cache if it is true</td>
<td>false</td>
<td>boolean</td>
</tr>
<tr>
<td>gh_custom_domain</td>
<td>Put this to true if you are using github pages with custom domain</td>
<td>false</td>
<td>boolean</td>
</tr>
</tbody>
</table>
<h4>Theme Configurations</h4>
<p>These configuration will be used for that specific theme only, they are located under templates/_templateConfig.js. Look at the theme documentation to understand what is available.</p>
<p><img src="https://i.imgur.com/mVoIG2w.png" alt="TemplateConfig"></p>
<h2>Quick Start - Your Content</h2>
<p>Put all your markdown files under the post folder, you will need to put the meta data in the front matter, see an example below.</p>
<p><img src="https://i.imgur.com/Jqodi7S.png" alt="Example Markdown"></p>
<h2>Quick Start - Deployment Set up Option 1 - Github Page</h2>
<h3>What is Github Page</h3>
<p>This <a href="https://pages.github.com/">link</a> gives you all you need to know about github page.</p>
<h3>Sign Up for GitHub Action</h3>
<p>The link is: <a href="https://github.com/features/actions">GitHub Action</a></p>
<p><img src="https://i.imgur.com/KRIawwK.png" alt="GitHub Action"></p>
<h3>Enable Github Action in your Forked Repo</h3>
<p><img src="https://i.imgur.com/CO0ISQk.png" alt="GitHub Action"></p>
<p>Click Actions and look at the terms before click agreement.</p>
<h3>Set up the deployment key for GitHub Action</h3>
<ul>
<li>Generate RSA public and private key pairs by using your usual software, otherwise you can generate it online. I randomly searched one in google, <a href="https://8gwifi.org/sshfunctions.jsp">click here</a></li>
<li>It should be RSA key and the size is 2048.</li>
</ul>
<p><img src="https://i.imgur.com/EbjIUXZ.png" alt="RSA Key Generator"></p>
<ul>
<li>Go to your repo settings, add a new deploy key by coping the public key we generated.</li>
</ul>
<p><img src="https://i.imgur.com/gVKjFti.png" alt="Deploy Key"></p>
<ul>
<li>Go to secrets, add a new secret by coping the private key we generated. The name of the secret must be  <strong>ACTIONS_DEPLOY_KEY</strong> as this is what we have in our github action.</li>
</ul>
<p><img src="https://i.imgur.com/KmxsoWD.png" alt="Secret"></p>
<h3>Update the CNAME file if you are using custom domain in Github Pages</h3>
<p>The CNAME file is under gh-pages/, add your custom domain to the CNAME file. Leave CNAME as empty if you are using the default github pages domain.</p>
<p><img src="https://i.imgur.com/I6iJPst.png" alt="Example CNAME"></p>
<h3>End of Github Pages Deployment Set Up</h3>
<p>You blog will get updated automatically everytime you make any changes in your git repo.</p>
<h2>Demo</h2>
<p><a href="https://www.sporule.com">Sporule</a></p>
<p><a href="https://www.eatsomemore.com">EatSomeMore</a></p>
<h2>To Do List</h2>
<ul>
<li>[ ] Add Documentation about deploying to Netlify and other platforms</li>
<li>[ ] Add Documentation on how to use custom pages</li>
<li>[ ] Add Unit Testing to the core part of the system</li>
<li>[ ] Find a way to pull all the paths of markdown files from Github</li>
<li>[ ] Support other comment system rather than disqus</li>
<li>[ ] Improve the SEO settings</li>
<li>[ ] Optimise the template system</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RELEASE OF THE FIRST VERSION OF MARKDOWN-HANDLER]]></title>
        <id>https://www.sporule.com/items/released-first-version-of-markdown-handler</id>
        <link href="https://www.sporule.com/items/released-first-version-of-markdown-handler"/>
        <updated>2019-09-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I am building a micro blog system because I don't really like the concept of static site generator, I believe the content of the site should be dynamic because I ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/xkhBTzk.png" alt="coverimage"></p>
<h2>Background</h2>
<p>I am building a micro blog system because I don't really like the concept of static site generator, I believe the content of the site should be dynamic because I don't really want to rebuild the site again and again.
Markdown-handler loads the markdown files on the fly through javascript and generate meta datas such as coverimage, thumbnail etc..</p>
<h2>Markdown Handler Details</h2>
<p><a href="https://travis-ci.org/sporule/markdown-handler"><img src="https://travis-ci.org/sporule/markdown-handler.svg?branch=master" alt="Build Status"></a>
<a href="https://www.npmjs.org/package/markdown-handler"><img src="https://img.shields.io/npm/v/markdown-handler.svg?style=flat" alt="NPM version"></a>
<img src="https://img.shields.io/david/sporule/markdown-handler" alt="Dependencies">
<a href="https://coveralls.io/github/sporule/markdown-handler?branch=master"><img src="https://coveralls.io/repos/github/sporule/markdown-handler/badge.svg?branch=master" alt="Coverage Status"></a></p>
<blockquote>
<p>Mini utility to help you load your markdown files by using the paths to .md files.</p>
</blockquote>
<h3>Features</h3>
<ul>
<li>Reads markdown contents by using the paths without pre-build.</li>
<li>Provide  search functionality by using <a href="https://fusejs.io/">Fuse.js</a>.</li>
<li>Provides some basic meta data such as tags, categories, date, coverimage but it is flexible to configure.</li>
</ul>
<h3>Installation</h3>
<p>Node.js</p>
<pre><code class="language-bash">npm install markdown-handler
</code></pre>
<h3>Usage Example (ES6)</h3>
<pre><code class="language-javascript">import MarkdownHandler from 'markdown-handler';

let mdHandler = new MarkdownHandler();

var paths = [
        &quot;https://sporule.com/1.md&quot;,
        &quot;https://sporule.com/2.md&quot;,
        &quot;https://sporule.com/3.md&quot;
]

mdHandler.loadMds(paths).then(posts =&gt; {
          console.log(posts);
          //To Search from markdowns
          posts.searchIndex(&quot;title to search&quot;);
});


</code></pre>
<h3>One of the example markdown files</h3>
<pre><code class="language-javascript">
---
title: &quot;This is another Demo Post&quot; 
author: &quot;Sporule&quot;
date: &quot;2019-09-10&quot;
categories: &quot;Another Demo&quot;
tags: &quot;tagA,tagD&quot;
coverImage: &quot;https://i.imgur.com/GzmpA4s.png&quot;
---

# Paragraph 1
Lorem ipsum dolor sit amet, nullam putent deserunt mel no, cum periculis intellegebat ne. Noluisse voluptatibus id sed, iudico essent ius et. In mutat mucius probatus eum. Has cu iusto audiam quaeque. Ad idque essent mei.

Mel solet aperiri similique id, ei mutat essent cotidieque eam, tempor ancillae pri te. Est at utroque explicari, eam comprehensam mediocritatem eu. Duis quodsi commune id cum, et eum noluisse consequuntur. Tation nullam conclusionemque mel in, nec volutpat splendide ad, nec ne persecuti intellegebat. Sed antiopam maiestatis rationibus no. Vocibus appetere mea an, no vix habeo dicant probatus.

</code></pre>
<h3>Output structure</h3>
<pre><code class="language-javascript">posts:
  {
    &quot;items&quot;: [
      {
        &quot;title&quot;: &quot;&quot;,
        &quot;content&quot;: &quot;&quot;,
        &quot;excerpt&quot;: &quot;&quot;,
        &quot;path&quot;: &quot;&quot;,
        &quot;metas&quot;: {
          &quot;categories&quot;: [],
          &quot;tags&quot;: [],
          &quot;title&quot;: &quot;&quot;,
          &quot;date&quot;: &quot;&quot;,
          &quot;coverimage&quot;: &quot;&quot;
        }
      }
    ],
    searchIndex: {}
  }
</code></pre>
<h3>Configurations</h3>
<table>
<thead>
<tr>
<th>Variable</th>
<th>Default</th>
<th>Type</th>
<th>Note</th>
</tr>
</thead>
<tbody>
<tr>
<td>excerptLength</td>
<td><code>30</code></td>
<td>integer</td>
<td>The length of excerpt, excerpt will be generated from the markdown files</td>
</tr>
<tr>
<td>defaultThumbnail</td>
<td><code>https://i.imgur.com/GzmpA4s.png</code></td>
<td>string</td>
<td>The default thumbnail if there is no image in markdown file</td>
</tr>
<tr>
<td>mustHaveMetas</td>
<td><code>[&quot;title&quot;, &quot;categories&quot;, &quot;tags&quot;, &quot;date&quot;]</code></td>
<td>string array</td>
<td>This are the must have metas at the beginning of the markdown file</td>
</tr>
<tr>
<td>excerptParser</td>
<td>take the set length from the markdown file</td>
<td>function</td>
<td>Input is the markdown file and the length of the excerpt, output is the excerpt string</td>
</tr>
<tr>
<td>thumbnailParser</td>
<td>take the first image from markdown file as thumbnail</td>
<td>function</td>
<td>Input is the markdown file, output is the thumbnail string</td>
</tr>
<tr>
<td>getSearchIndex</td>
<td>This is to build the search index by using Fuse, search key is title</td>
<td>function</td>
<td>Input is the post processed markdown items, output is the fuse search object</td>
</tr>
</tbody>
</table>
<h3>Meta Data</h3>
<p>All meta data between at the beginning of the document will be loaded into the item object, for example if you want the color attribute in meta data, you shoud have the markdown files look like:</p>
<pre><code class="language-javascript">
---
title: &quot;This is another Demo Post&quot; 
author: &quot;Sporule&quot;
date: &quot;2019-09-10&quot;
categories: &quot;Another Demo&quot;
tags: &quot;tagA,tagD&quot;
coverImage: &quot;https://i.imgur.com/GzmpA4s.png&quot;
color:&quot;pink&quot;
---

# Paragraph 1
Lorem ipsum dolor sit amet, nullam putent deserunt mel no, cum periculis intellegebat ne. Noluisse voluptatibus id sed, iudico essent ius et. In mutat mucius probatus eum. Has cu iusto audiam quaeque. Ad idque essent mei.

Mel solet aperiri similique id, ei mutat essent cotidieque eam, tempor ancillae pri te. Est at utroque explicari, eam comprehensam mediocritatem eu. Duis quodsi commune id cum, et eum noluisse consequuntur. Tation nullam conclusionemque mel in, nec volutpat splendide ad, nec ne persecuti intellegebat. Sed antiopam maiestatis rationibus no. Vocibus appetere mea an, no vix habeo dicant probatus.

</code></pre>
<h3>Example Implementation of the Code</h3>
<p><a href="https://github.com/sporule/sporule">Sporule</a> : A micro blog system that uses markdown-handler</p>
<h2>Markdown-Handler Github Page</h2>
<p><a href="https://github.com/sporule/markdown-handler">Markdown-Handler</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GENERATE VOCABULARY AND TOKENISES SEQUENCES BY USING KERAS.PREPROCESSING]]></title>
        <id>https://www.sporule.com/items/generate-vocabulary-and-tokenises-sequences-by-using-keras</id>
        <link href="https://www.sporule.com/items/generate-vocabulary-and-tokenises-sequences-by-using-keras"/>
        <updated>2019-09-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I found that it is very straightforward to generate the vocab by using keras, however the examples on their website is not very straightforward.

The example below is read a QA ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://miro.medium.com/max/1000/1*LkKz4wtZNBo5i-Vc8DWhTA.png" alt="coverimage"></p>
<h2>Backgrounds</h2>
<p>I found that it is very straightforward to generate the vocab by using keras, however the examples on their website is not very straightforward.</p>
<p>The example below is read a QA Data Set from csv file, and then generate a vocab by using the <code>keras.preprocessing</code> library.</p>
<p>Start with loading the data</p>
<pre><code class="language-python">import pandas as pd 
qa_df = pd.read_csv(&quot;python_qa.csv&quot;,encode = &quot;ISO-8859-1&quot;,sep='\t')
</code></pre>
<p>The data format</p>
<table>
<thead>
<tr>
<th></th>
<th>Question</th>
<th>Answer</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>How can I find the full path to a font from it...</td>
<td>Unfortunately the only API that isn't deprecat...</td>
</tr>
<tr>
<td>1</td>
<td>Get a preview JPEG of a PDF on Windows? I have...</td>
<td>ImageMagick delegates the PDF-&gt;bitmap conversi...</td>
</tr>
<tr>
<td>2</td>
<td>Continuous Integration System for a Python Cod...</td>
<td>One possibility is Hudson. It's written in Ja...</td>
</tr>
<tr>
<td>3</td>
<td>cx_Oracle: How do I iterate over a result set?...</td>
<td>The canonical way is to use the built-in curs</td>
</tr>
<tr>
<td>4</td>
<td>Using 'in' to match an attribute of Python obj...</td>
<td>Using a list comprehension would build a tempo...</td>
</tr>
</tbody>
</table>
<p>The function to generate the vocab</p>
<pre><code class="language-python">from keras.preprocessing import text,sequence

#util function
def generate_vocab(x,y,max_seq_length,batch_size):
    #create vocab base on x and y
    vocab = text.Tokenizer(lower=True, split=' ', oov_token='&lt;UNK&gt;',char_level=False, document_count=0)
    vocab.fit_on_texts(x)
    vocab.fit_on_texts(y)
    #tokenise x and y
    x_seqs = vocab.texts_to_sequences(x)
    y_seqs = vocab.texts_to_sequences(y)
    #pad seqs to the max length, truncate the words that outside the max length
    x_seqs = sequence.pad_sequences(x_seqs,padding='post',truncating='post',maxlen=max_seq_length)
    y_seqs = sequence.pad_sequences(y_seqs,padding='post',truncating='post',maxlen=max_seq_length)
    #generate dataset for network to consume with batch
    xy_set = tf.data.Dataset.from_tensor_slices((x_seqs, y_seqs)).batch(batch_size, drop_remainder=True)
    return vocab,x_seqs,y_seqs,xy_set
</code></pre>
<p>Or you can generate two vocab for x and y</p>
<pre><code class="language-python">def generate_vocab(x,y,max_seq_length,batch_sz,vocab_length):
    #create vocab base on x and y
    x_vocab = text.Tokenizer(num_words=vocab_length,lower=True,filters='!&quot;#$%&amp;()*+,-./:;=?@[\\]^_`{|}~\t\n', split=' ', oov_token=UNK,char_level=False, document_count=0)
    x_vocab.fit_on_texts(x)
    y_vocab = text.Tokenizer(num_words=vocab_length,lower=True, filters='!&quot;#$%&amp;()*+,-./:;=?@[\\]^_`{|}~\t\n',split=' ', oov_token=UNK,char_level=False, document_count=0)
    y_vocab.fit_on_texts(y)
    #tokenise x and y
    x_seqs = x_vocab.texts_to_sequences(x)
    y_seqs = y_vocab.texts_to_sequences(y)
    #pad seqs to the max length, truncate the words that outside the max length
    x_seqs = sequence.pad_sequences(x_seqs,padding='post',truncating='post',maxlen=max_seq_length)
    y_seqs = sequence.pad_sequences(y_seqs,padding='post',truncating='post',maxlen=max_seq_length)
    #generate dataset for network to consume with batch
    xy_set = tf.data.Dataset.from_tensor_slices((x_seqs, y_seqs)).batch(batch_sz, drop_remainder=True)
    return x_vocab,y_vocab,x_seqs,y_seqs,xy_set
</code></pre>
<p>Generate the vocab by using the function we just wrote</p>
<pre><code class="language-python">MAX_SEQ_LENGTH=20
BATCH_SIZE = 8
vocab,q_seqs,a_seqs,qa_set = generate_vocab(qa_df['Question'],qa_df['Answer'],MAX_SEQ_LENGTH,BATCH_SIZE)
</code></pre>
<p>Vocab is the overall vocab, q_seqs and a_seqs are the tokenised questions and aswers.</p>
<p>You can find more information on <a href="https://keras.io/preprocessing/text/">https://keras.io/preprocessing/text/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LOREM IPSUM DEMO POST]]></title>
        <id>https://www.sporule.com/items/Lorem_Ipsum_usage</id>
        <link href="https://www.sporule.com/items/Lorem_Ipsum_usage"/>
        <updated>2019-09-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Lorem ipsum dolor sit amet, nullam putent deserunt mel no, cum periculis intellegebat ne. Noluisse voluptatibus id sed, iudico essentius et. In mutat mucius probatus eum. Has cu iusto audiam ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/1UDpSHj.png" alt="coverimage"></p>
<h1>Paragraph 1</h1>
<p>Lorem ipsum dolor sit amet, nullam putent deserunt mel no, cum periculis intellegebat ne. Noluisse voluptatibus id sed, iudico essentius et. In mutat mucius probatus eum. Has cu iusto audiam quaeque. Ad idque essent mei.</p>
<p>Mel solet aperiri similique id, ei mutat essent cotidieque eam, tempor ancillae pri te. Est at utroque explicari, eam comprehensam mediocritatem eu. Duis quodsi commune id cum, et eum noluisse consequuntur. Tation nullam conclusionemque mel in, nec volutpat splendide ad, nec ne persecuti intellegebat. Sed antiopam maiestatis rationibus no. Vocibus appetere mea an, no vix habeo dicant probatus.</p>
<h2>Paragraph 1.1</h2>
<p>Pro cu mollis tractatos definiebas, id sed zril fastidii contentiones. Stet melius detraxit ea vix. Oratio iuvaret fabulas ex sea, usu mandamus constituto ea, paulo conceptam mea in. Ex legere ridens salutandi usu, simul quaerendum cu eum. In iudico civibus argumentum ius, ullum populo at pro. Ne quo nisl propriae voluptaria, no eam labore debitis, ea assum ignota persequeris has. No persius eleifend persequeris duo, duis zril lobortis et sed, inermis posidonium te per.</p>
<p><img src="https://i.imgur.com/1UDpSHj.png" alt="logo"></p>
<h2>Paragraph 1.2</h2>
<p>Ea eum nonumy epicurei. Diam utamur aliquando no sea, in vim quot molestiae. Eligendi consetetur honestatis sea te, cum ut case dissentiunt, in per epicuri electram deseruisse. Ad usu sale mediocritatem, ne vis persius euismod repudiandae. Copiosae sadipscing sea ut.</p>
<h3>Paragraph 1.2.1</h3>
<p>Quod dolorum principes no pro, meis periculis mei ei, vis labore cetero ne. Mei ei eruditi volumus facilisi, at sed luptatum facilisi abhorreant, brute omnes tibique ut pro. Putant iracundia ne duo, ne pri tempor aliquip reprimique. Ex vide tollit sententiae sea, platonem salutatus consulatu no has.</p>
<h1>Paragraph 2</h1>
<p>Cum ad movet populo temporibus, cu usu harum utinam, inermis consequat eam at. At mei commodo iuvaret percipit, soluta altera ius ex, voluptua inciderint his ex. Alii consectetuer mel eu, et putent causae postulant nec, vidit deserunt hendrerit et sit. His no erat autem consequuntur, eam eu nobis alterum neglegentur, etiam adipisci salutandi mea cu. Vel no unum ornatus, consul fierent at vel. Vix eu labitur copiosae efficiendi.</p>
<p>Et vix porro nullam offendit. Doming aeterno consetetur quo eu. Torquatos conceptam mei te. Tollit tantas definiebas pro ea. Ceteros propriae vivendum nam ei. Quo viris dicant eu, at qui nonumy fabulas voluptaria.</p>
<p>Pri nisl necessitatibus eu, duo tibique scribentur cu, an diam natum cum. Ei vim aeterno luptatum definiebas, vix et aeterno imperdiet efficiantur. Semper dicunt eu mel. Sed labitur adversarium ad, has amet alienum id. Quem illud usu eu, vix aliquip ullamcorper consectetuer no, harum iisque nominati ex vel. Eum animal nonumes referrentur at.</p>
<p>Voluptua temporibus nec cu, mei an error disputationi. Corrumpit dissentias eum ex, causae equidem an mel. Consul ubique everti mea ne. Purto simul adolescens ei pro, ea denique corrumpit cum, usu eu accumsan indoctum mediocritatem.</p>
<p>Vel te tota libris honestatis. Vel no denique reprimique. Et insolens molestiae est, sit an veri intellegam. Audire viderer no duo, euismod graecis eam id, vis in veniam timeam efficiantur. Illum deserunt intellegat no mei.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[USE APACHE MXNET DEEP LEARNING FRAMEWORK ON KAGGLE'S FREE GPU]]></title>
        <id>https://www.sporule.com/items/use-apache-mxnet-deep-learning-framework-on-kaggle-s-free-gpu</id>
        <link href="https://www.sporule.com/items/use-apache-mxnet-deep-learning-framework-on-kaggle-s-free-gpu"/>
        <updated>2019-09-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The default MXNet installed in Kaggle's python container is 1.3.1 rather than the CUDA version of MXNet.

So what we need do is simply uninstalled the current MXNet and install the ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://miro.medium.com/max/668/1*GZrTyTz0OKMbxnO5Trhcew.png" alt="coverimage"></p>
<h2>Backgrounds</h2>
<p>The default MXNet installed in Kaggle's python container is 1.3.1 rather than the CUDA version of MXNet.</p>
<p>So what we need do is simply uninstalled the current MXNet and install the CUDA version of MXNet.</p>
<h2>How to</h2>
<p>To start with, turn on the GPU option and internet option on your Kaggle Kernel(Notebook)
<a href="https://i.imgur.com/fX2m8vV.png">kaggle</a></p>
<p>Then open the console and run:</p>
<pre><code class="language-bash">!nvcc --version
</code></pre>
<p>The current version of CUDA is 9.1:
<a href="https://i.imgur.com/UFJuXYM.png">cuda</a></p>
<p>Then what we need to do is to uninstall the current MXNet and then reinstall the mxnet-cu&lt;&lt;Version&gt;&gt;, in this case is mxnet-cu91.  We reinstalled numpy because of the version requirements from mxnet-cu91</p>
<pre><code class="language-bash">!pip uninstall -y mxnet
!pip install 'numpy&lt;1.15.0,&gt;=1.8.2' mxnet-cu91
</code></pre>
<p>Everything should work properly now.
Follow MXNet's guide on how to use GPU for data training.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[USING PYENV AND VIRTUALENV IN LINUX, AND INSTALL JUPYTER LAB]]></title>
        <id>https://www.sporule.com/items/using-pyenv-and-virtualenv-in-linux--and-install-jupyter-lab</id>
        <link href="https://www.sporule.com/items/using-pyenv-and-virtualenv-in-linux--and-install-jupyter-lab"/>
        <updated>2019-08-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[pyenv is a simple python version management package, it allows you to install different version of python in your machine.

pyenv-virtualenv is a plugin for pyenv to use virutal python environment ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/sHZq6hn.png" alt="coverimage"></p>
<h2>Backgrounds</h2>
<p>pyenv is a simple python version management package, it allows you to install different version of python in your machine.</p>
<p>pyenv-virtualenv is a plugin for pyenv to use virutal python environment in your machine.</p>
<p>This package is very useful as you can simply switch python environment as well as build the live environment in your PC without impacting the master version of python.</p>
<h2>How to</h2>
<p>Pyenv provided an automatic script for installation from their Git.</p>
<p>Open terminal, type below command:</p>
<pre><code class="language-bash">curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash
</code></pre>
<p>Above script will install pyenv to your environment, then add the pyenv bin to the PATH:</p>
<pre><code class="language-bash">export PATH=&quot;~/.pyenv/bin:$PATH&quot; 
eval &quot;$(pyenv init -)&quot; 
eval &quot;$(pyenv virtualenv-init -)&quot;
</code></pre>
<p>Add above three lines to the end of your <code>~\.bashrc</code> if you want it to add pyenv to the PATH automatically after restart.</p>
<p>Before installing a new version of python, I will suggest you to install build dependencies before installing other python versions to avoid compiling errors.</p>
<p>Run below to install all dependencies:</p>
<pre><code class="language-bash">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
xz-utils tk-dev libffi-dev liblzma-dev
</code></pre>
<p>Now you can start to install different python version, I am using the 3.6.0:</p>
<pre><code class="language-bash">pyenv install 3.6.0
</code></pre>
<p>After having the 3.6.0 version of python installed, I can now create virtual environment base on the 3.6.0. I am creating this environment for jupyter lab so I named in jupyter_3.6</p>
<pre><code class="language-bash">pyenv virtualenv 3.6.0 jupyter_3.6
</code></pre>
<p>Now we can activate the virtual environment by using:</p>
<pre><code class="language-bash">pyenv activate jupyter_3.6
</code></pre>
<p>You can see that the environment switched to the environment we just created. The python bin and pip bin is now pointed to pyenv folder.
<img src="https://i.imgur.com/sHZq6hn.png" alt="pyenv"></p>
<p>I suggest to upgrade pip before installing any packages:</p>
<pre><code class="language-bash">pip install --upgrade pip
</code></pre>
<p>Now you can start to install what ever pacakges are required for your environment, we are setting up this environment for jupyter lab, so I will install jupyter lab</p>
<pre><code class="language-bash">pip install jupyterlab
</code></pre>
<p>If you want to exit the environment then use deactivate</p>
<pre><code class="language-bash">pyenv deactivate
</code></pre>
<p>All above information is available in <a href="https://github.com/pyenv/pyenv">pyenv's github</a>, what I did is providing a summary to save the time.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MANUALLY SET STORAGE FOLDER FOR ANDROID APPS THAT RUN IN ARCHON (CHROME)]]></title>
        <id>https://www.sporule.com/items/manually-set-storage-folder-for-android-apps-that-run-in-archon-chrome</id>
        <link href="https://www.sporule.com/items/manually-set-storage-folder-for-android-apps-that-run-in-archon-chrome"/>
        <updated>2019-08-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ARChon is a very useful software where allows users to run android application in Chrome.

However, you will need to set the external storage permission for the apk to specify the ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://techdissected.com/wp-content/uploads/2015/04/Archon-Custom-Runtime-1920x500.jpg" alt="coverimage"></p>
<h2>Backgrounds</h2>
<p>ARChon is a very useful software where allows users to run android application in Chrome.</p>
<p>However, you will need to set the external storage permission for the apk to specify the storage location for the Android app.</p>
<p>This is extremly useful when you are trying to use the video or music app to cache content.</p>
<h2>Implementation</h2>
<p>It is very easy to do it, what you need to do is to change the manifest.json file in the apk package.</p>
<p>I am using Deepin LInux system, the apps folder are in</p>
<pre><code class="language-bash">/lastore/apps/
</code></pre>
<p>Find below two entries(enableExternalDirectory and fileSystem) and ensure they look like below:</p>
<pre><code class="language-bash">&quot;enableExternalDirectory&quot;: true,
&quot;fileSystem&quot;: [
        &quot;write&quot;,&quot;directory&quot;
      ]
</code></pre>
<p>That is it, so simple. You will get a pop up folder selector when you open your ARChon Apps.</p>
<h2>Credit</h2>
<p><a href="https://github.com/vladikoff/chromeos-apk/issues/199">Github Q&amp;A</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SOLUTIONS FOR CROSS ORIGIN REQUEST SECURITY (CORS) IN PWA (PROGRESSIVE WEB APPS)]]></title>
        <id>https://www.sporule.com/items/solutions-for-cross-origin-request-security-cors--in-pwa-progressive-web-apps</id>
        <link href="https://www.sporule.com/items/solutions-for-cross-origin-request-security-cors--in-pwa-progressive-web-apps"/>
        <updated>2019-07-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I was building a PWA app that consumes APIs from some providers.

As PWA is just a web app, so it has the exactly the same CORS restrictions as other web ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/IVXFYbt.png" alt="coverimage"></p>
<h2>Backgrounds</h2>
<p>I was building a PWA app that consumes APIs from some providers.</p>
<p>As PWA is just a web app, so it has the exactly the same CORS restrictions as other web apps.</p>
<p>You won't have this type of issue if you are using native development, so it is very annoying as I don't have access to those APIs server to enable Cross Origin Request.</p>
<p>By browsing in Google, I found someone built a solution that enables a reverse proxy to overcome this difficulties.</p>
<h2>Solution</h2>
<p>The name is CORS-ANYWHERE, the github link is https://github.com/Rob--W/cors-anywhere/</p>
<p>This is a very simple and neat solution to solve the problems for small projects.</p>
<p>Depends on the traffic of your project, you can buy different servers with different specification, I used Heroku free server as my application is relatively small.</p>
<h2>Steps to create the reverse proxy in Heroku free instance</h2>
<p>Register a free account in Heroku, please verify your email as per instruction in Heroku.
Then Create a new app:
<img src="https://i.imgur.com/IVXFYbt.png" alt="heroku">
Follow the instruction to install Heroku CLI and GIT if you didn't have them installed before.
<img src="https://i.imgur.com/2ovsWYO.png" alt="heroku">
Open your terminal or cmd(Windows).
Clone the CROS-anywhere from Github</p>
<pre><code class="language-bash">git clone https://github.com/Rob--W/cors-anywhere.git
cd cors-anywhere/
</code></pre>
<p>Login to Heroku and add your app as a remote repo, then push the app to the app</p>
<pre><code class="language-bash">heroku git:remote -a enteryourappname
git push heroku master
</code></pre>
<p>It will build the app and return a link to your app, use this app as a reverse proxy.
<a href="https://i.imgur.com/2ovsWYO.png">heroku</a></p>
<h2>How to Use it</h2>
<blockquote>
<ul>
<li>You can use it by adding your app url as a prefix to your api, for example your heorku url is &quot;https://abc.herokuapp.com/&quot;, your API is &quot;https://api.com/user&quot;.</li>
<li>What you need to do is to send the request to &quot;https://abc.herokuapp.com/https://api.com/user&quot;, it will return whatever will be returned from the API server.</li>
<li>You can test the API by using the demo CROS-anywhere demo: https://cors-anywhere.herokuapp.com/</li>
</ul>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FLUTTER - HOW TO SHOW MESSAGE IN UI AFTER RECEVING WEB RESPONSES]]></title>
        <id>https://www.sporule.com/items/flutter-how-to-show-message-in-ui-after-receving-web-responses</id>
        <link href="https://www.sporule.com/items/flutter-how-to-show-message-in-ui-after-receving-web-responses"/>
        <updated>2019-07-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Flutter was quiet hot in the Tech news these days, so I am giving it a try to write an Android app.

It share the similar concept as React, which uses ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/GzmpA4s.png" alt="coverimage"></p>
<h2>The Problem</h2>
<p>Flutter was quiet hot in the Tech news these days, so I am giving it a try to write an Android app.</p>
<p>It share the similar concept as React, which uses the States system. I wouldn't explain more here as this can be found all over the place in Google.</p>
<p>I did some Windows development before, which has a control &quot;MessageBox&quot; is very useful to give some feedback information to the user.</p>
<h2>Solution</h2>
<p>In flutter, it does have something similar call &quot;AlertDialog&quot;, however it is not very straightforward.</p>
<p>Below is an example on how to display a message(or any control) on a screen after receving responses from any web services.</p>
<p>To start with, we create a widget as a container for displaying the message.</p>
<p>This widget will be empty for now, but we will have a function later to populate the content of this widget.</p>
<pre><code class="language-javascript">Widget messageWidget;
</code></pre>
<p>Then we need to place this widget to the location you want it to be</p>
<pre><code class="language-javascript"> @override
  Widget build(BuildContext context) {
        return Stack(
      children: &lt;Widget&gt;[
        messageWidget
      ],
    );
}
</code></pre>
<p>Now we need to create a function to build the messageWidget, it allows user to pass a text string, which is the message you want to display.</p>
<pre><code class="language-javascript">Widget getMessageController(String text){
    return Stack(
      children: &lt;Widget&gt;[
        Align(
          alignment:Alignment.topCenter,
          child: Text(text, style: new TextStyle(
            color: Colors.white,
            fontSize: 15.0,
            fontWeight: FontWeight.bold,
          )),
        )
      ],
    );
  }
</code></pre>
<p>Finally we have a function to handle the request to API</p>
<pre><code class="language-javascript">void handleMessage() async{
    setState(() {
      messageWidget = getMessageController(&quot;Sending Request....&quot;);
    });
    String response= await http.get(&quot;https://google.com&quot;);
    //change the message in the message controller after receiving the response
    setState(() {
        messageWidget = getMessageController(&quot;Response received&quot;);
      });
    }
    //dismiss the message box after 3 seconds
    new Future.delayed(new Duration(seconds: 3), () {
      setState(() {
        setState(() {
          //dismiss the message box
          messageWidget = null;
        });
      });
    });

  }
</code></pre>
<p>You can simply replace the messageWidget to a AlertDialog and then provide a button for user to dismiss the messagebox.</p>
<p>Overall if you package this into a class, then you will be able to reuse this in all places in your Flutter application.</p>
<p>At the end, I am still quiet new to Flutter,  please do let me know if you have better way to implement the messagebox.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[EXOPLAYER SOURCE ERROR ON ANDROID 8 AND ABOVE]]></title>
        <id>https://www.sporule.com/items/exoplayer-source-error-on-android-8-and-above</id>
        <link href="https://www.sporule.com/items/exoplayer-source-error-on-android-8-and-above"/>
        <updated>2019-07-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[EXOPlayer is an open source video player for mobile.
Yesterday I was trying to use EXOPlayer in my Pixel but it couldn't stream video (m3u8) by using EXOPlayer.

The error message is ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://miro.medium.com/max/3092/1*oxK1gF5zFP9z9_9qFDOKlQ.png" alt="coverimage"></p>
<h2>The Problem</h2>
<p>EXOPlayer is  an open source video player for mobile.
Yesterday I was trying to use EXOPlayer in my Pixel but it couldn't stream video (m3u8) by using EXOPlayer.</p>
<p>The error message is not very clear: &quot;Source Error, can't connect to http://xxxxxxxx&quot;</p>
<p>I was very confused as I am pretty sure the url I passed in is working OK.</p>
<h2>The Cause</h2>
<p>I spent 20 minutes trying to resolve the issue, finally I found a small hidden error message in the console says &quot;Cleartext HTTP traffic not permitted&quot;.</p>
<p>The new error message is very clear, the solution is simply add android:usesCleartextTraffic=&quot;true&quot; into the mainfest:</p>
<pre><code class="language-javascript"> &lt;application
        android:allowBackup=&quot;true&quot;
        android:icon=&quot;@mipmap/ic_launcher&quot;
        android:label=&quot;xxxxxx&quot;
        android:supportsRtl=&quot;true&quot;
        android:theme=&quot;@style/AppTheme&quot;
        android:usesCleartextTraffic=&quot;true&quot;&gt;
</code></pre>
<p>Works perfectly fine after adding the usesClearText, you will need to add this for Android 8.0 and above.</p>
<p>Please note that you should not use clear text traffic if the informatin you are trying to send is confidential.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MODULE PARSE FAILED UNEXPECTED CHARACTER'' ERROR WHEN USING WEBPACK FOR FONTAWSOME FROM ONSENUI]]></title>
        <id>https://www.sporule.com/items/module-parse-failed-unexpected-character-error-when-using-webpack-for-fontawsome-from-onsenui</id>
        <link href="https://www.sporule.com/items/module-parse-failed-unexpected-character-error-when-using-webpack-for-fontawsome-from-onsenui"/>
        <updated>2019-07-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I was using webpack to package the woff file from fontawsome in OnsenUI, however it raise the error:

```bash
ERROR in ./~/onsenui/css/font_awesome/fonts/fontawesome-webfont.woff?v=4.7.0
Module parse failed: C:\Users\luoha\Documents\Projects\spplayer-pwa\node_modules\onsenui\css\font_awesome\fonts\f ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://www.valentinog.com/blog/wp-content/uploads/2018/01/tutorial-webpack-4-featured.png" alt="coverimage"></p>
<h2>The problem</h2>
<p>I was using webpack to package the woff file from fontawsome in OnsenUI, however it raise the error:</p>
<pre><code class="language-bash">ERROR in ./~/onsenui/css/font_awesome/fonts/fontawesome-webfont.woff?v=4.7.0
Module parse failed: C:\Users\luoha\Documents\Projects\spplayer-pwa\node_modules\onsenui\css\font_awesome\fonts\fontawesome-webfont.woff?v=4.7.0 Unexpected character '' (1:4)
You may need an appropriate loader to handle this file type.
</code></pre>
<h2>Cause</h2>
<p>I have spent quiet a lot of time to find out the reason, end up the solution is very simple.</p>
<p>I was using regex to match the woff file:</p>
<p>{
test: /.(woff|woff2|eot|ttf|svg)/,
loader: 'file?name=assets/[name].[ext]'
}
However the woff file name is actually fontawesome-webfont.woff?v=4.7.0, it contains a version number at the end. As a result, it does not fit into the pattern of my regex hence webpack didn't load them.</p>
<h2>Solution</h2>
<p>The solution is add a pattern at the end to match possible versions:</p>
<p>{
test: /.(woff|woff2|eot|ttf|svg)(?.*$|$)/,
loader: 'file?name=assets/[name].[ext]'
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[STATE PATTERN - CONTROL THE BEHAVIOURS BY USING STATES]]></title>
        <id>https://www.sporule.com/items/state-pattern-control-the-behaviours-by-using-states</id>
        <link href="https://www.sporule.com/items/state-pattern-control-the-behaviours-by-using-states"/>
        <updated>2019-06-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[States pattern set a state to a object, then the object will have different behaviours in different states.

State Pattern Implementation:
Below is a simple TV on and off example.

The TV contains ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/StatePattern/StatePattern.png" alt="coverimage"></p>
<h2>What is States Pattern</h2>
<p>States pattern set a state to a object, then the object will have different behaviours in different states.</p>
<p>State Pattern Implementation:
Below is a simple TV on and off example.</p>
<p>The TV contains two state, stateOn and stateOff</p>
<p>The TV can't be turn on when the state is stateOn, and the TV can't be turn off when the state is stateOff.</p>
<p>We start from a State interface, StateOn and StateOff</p>
<pre><code class="language-python">class State():
    
    @staticmethod
    def SwitchOn():
        raise NotImplementedError
    @staticmethod
    def SwitchOff():
        raise NotImplementedError

class StateOn(State):
    
    @staticmethod
    def SwitchOn():
        print(&quot;You can't switch on again as it is already On&quot;)
    @staticmethod
    def SwitchOff():
        print(&quot;It is switched off&quot;)

class StateOff(State):
    @staticmethod
    def SwitchOn():
        print(&quot;It is switched on&quot;)
    @staticmethod
    def SwitchOff():
        print(&quot;You can't switch off as it is already off&quot;)
</code></pre>
<p>Then I created a TV object that takes name, stateOn and stateOff in constructor.</p>
<p>It also has two functions which is SwitchOn and Switch Off</p>
<pre><code class="language-python">class TV():
    def __init__(self,name,stateOn,stateOff):
        self._name=name
        self._stateOn=stateOn
        self._stateOff=stateOff
        self._state = self._stateOff
    
    def SwitchOn(self):
        self._state.SwitchOn()
        self._state=self._stateOn
    
    def SwitchOff(self):
        self._state.SwitchOff()
        self._state=self._stateOff
</code></pre>
<h3>Diagram</h3>
<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/StatePattern/StatePattern.png" alt="State Pattern"></p>
<h2>Example Code</h2>
<p><a href="https://github.com/Hao-Luo/DesignPattern/tree/master/StatePattern">State Pattern Example</a></p>
<h2>Credit</h2>
<p>&lt;&lt; Head First Design Patterns &gt;&gt;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[COMPOSITE PATTERN - CONSISTENT REPRESENTATION OF EACH ITEM IN HIERARCHY STRUCTURE]]></title>
        <id>https://www.sporule.com/items/composite-pattern-consistent-representation-of-each-item-in-hierarchy-structure</id>
        <link href="https://www.sporule.com/items/composite-pattern-consistent-representation-of-each-item-in-hierarchy-structure"/>
        <updated>2019-05-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Sometimes we have a requriements that to have a hierarchy design of objects. Such as limitless navigation. Navigation could have individual item and individual item with sub items. Applying composite ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/CompositePattern/CompositePattern.png" alt="coverimage"></p>
<h2>What is Composite Pattern</h2>
<p>Sometimes we have a requriements that to have a hierarchy design of objects. Such as limitless navigation. Navigation could have individual item and individual item with sub items. Applying composite pattern will make all navigation item in a consistent way not matter if it has children item or not.</p>
<h2>Composite Pattern Implementation</h2>
<p>Below is a simple nodes tree structure example.</p>
<p>Starts from a node model, which contains a children nodes array to store all children nodes.</p>
<p>The Print() function will print the node name and exectue all children nodes Print() function.</p>
<p>As you can see, it treat both single node and node with children in the same way.</p>
<pre><code class="language-python">class Node():
    def __init__(self, name):
        self._name = name
        self._nodes = []
    
    def Add(self,node):
        self._nodes.append(node)
    
    def Get(self,index):
        return self._nodes[index]
    
    def Print(self):
        print(self._name)
        for node in self._nodes:
            node.Print()
</code></pre>
<p>Then I created few nodes, it then prints the nodes from left to right in a tree structure.(you can see the structure of the nodes in the diagram at the end of this article.)</p>
<pre><code class="language-python">#create samle nodes
nodeA = Node(&quot;A&quot;)
nodeA1 = Node(&quot;A1&quot;)
nodeA2 = Node(&quot;A2&quot;)
nodeA1a= Node(&quot;A1a&quot;)
nodeA1b = Node(&quot;A1b&quot;)
nodeA2a = Node(&quot;A2a&quot;)
nodeA2b = Node(&quot;A2b&quot;)

#left nodes
nodeA.Add(nodeA1)
nodeA1.Add(nodeA1a)
nodeA1.Add(nodeA1b)

#RIGHT NODES
nodeA.Add(nodeA2)
nodeA2.Add(nodeA2a)
nodeA2.Add(nodeA2b)


nodeA.Print()
#output
#A
#A1
#A1a
#A1b
#A2
#A2a
#A2b
</code></pre>
<h3>Diagram</h3>
<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/CompositePattern/CompositePattern.png" alt="Composite Pattern"></p>
<h2>Example Code</h2>
<p><a href="https://github.com/Hao-Luo/DesignPattern/tree/master/CompositePattern">Composite Pattern Example</a></p>
<h2>Credit</h2>
<p>&lt;&lt; Head First Design Patterns &gt;&gt;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ITERATOR PATTERN - ACCESS THE ITEMS IN AGGREGATE OBEJCTS WITHOUT KNOWING THE UNDERLYING OF THE OBJECTS]]></title>
        <id>https://www.sporule.com/items/iterator-pattern-access-the-items-in-aggregate-obejcts-without-knowing-the-underlying-of-the-objects</id>
        <link href="https://www.sporule.com/items/iterator-pattern-access-the-items-in-aggregate-obejcts-without-knowing-the-underlying-of-the-objects"/>
        <updated>2019-05-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Iterator pattern provides a consistent interface to different aggregate objects such as list, dictionary etc. It disconnect the user of the iterator interface and its underlying objects.

For example the user ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/IteratorPattern/IteratorPattern.png" alt="coverimage"></p>
<h2>What is Iterator Pattern</h2>
<p>Iterator pattern provides a consistent interface to different aggregate objects such as list, dictionary etc. It disconnect the user of the iterator interface and its underlying objects.</p>
<p>For example the user of the iterator interface does not need to worry about the underlying objects is dict or array etc.</p>
<h2>Iterator Pattern Implementation</h2>
<p>Below example is showing calling the iterator for an array and requests from database.</p>
<p>Firstly, we need to have a iterator interface. This interface needs to implment a logic on how to iterate the items.</p>
<p>I have created a very simple one with HasNext() and Next() for using in while loop.</p>
<pre><code class="language-python">class Iterator():
    def __init__(self,name):
        self._name=name
        
    def HasNext(self):
        raise NotImplementedError
    
    def Next(self):
        raise NotImplementedError
</code></pre>
<p>Then I created two classes, one is student and the other is teacher. They both have a function call GetIterator(), it turns objects into Concrete iterator which I will explain below.</p>
<p>The teacher model is very basic without any special settings</p>
<pre><code class="language-python">class Teacher():
    def __init__(self,name):
        self._name=name
    
    @property
    def Name(self):
        return self._name
    
    @staticmethod
    def GetIterator(teachers):
        #teachers is the teacher array
        return TeacherIterator(teachers)
</code></pre>
<p>I added a Mock Database class to simulate getting students object from the database.</p>
<p>I also added a function GetStudentById() in student class to simulate getting specific student by using the id from the Mock Database.</p>
<p>You don't need to focus on the details about mocking database and get students from the mock database, the whole purpose of doing that is trying to show a object that does not contain out of box iterator. It is not a good practise to use iterator in database in this way.</p>
<pre><code class="language-python">class Student():
    def __init__(self,name):
        self._name=name
    
    @property
    def Name(self):
        return self._name
    
    @staticmethod
    def GetIterator(student_ids):
        return StudentIterator(student_ids)
    
    @staticmethod
    def GetStudentById(id):
        #this is a mock of getting student from database
        return DBMock.GetStudent(&quot;Students&quot;,id)

class DBMock():
    &quot;&quot;&quot;This is the mock database&quot;&quot;&quot;
    def __init__(self):
        self._db = &quot;&quot;
    
    @staticmethod
    def GetStudent(collection,id):
        return Student(collection+&quot; &quot;+str(id))
</code></pre>
<p>Now we need to implement the Concrete Iterator TeacherIterator and StudentIterator. These are inherit from iterator. This is the iterator object that will return for GetIterator()</p>
<p>These Concrete iterators has its own implementation of HasNext() or Next(), it is very similar as the adapter pattern.</p>
<pre><code class="language-python">class TeacherIterator(Iterator):
    #teachers are the teacher dict
    def __init__(self,teachers):
        self._teachers=teachers
        self._position=-1
        
    def HasNext(self):
        if len(self._teachers)&lt;=self._position+1:
            return False
        else:
            return True
    
    def Next(self):
        self._position+=1
        return self._teachers[self._position]

class StudentIterator(Iterator):
    #student_ids are the student ids array
    def __init__(self,student_ids):
        self._student_ids=student_ids
        self._position=-1
        
    def HasNext(self):
        if len(self._student_ids)&lt;=self._position+1:
            return False
        else:
            return True
    
    def Next(self):
        self._position+=1
        return Student.GetStudentById(self._student_ids[self._position])
</code></pre>
<p>Now we run a test so you can see PrintAllNames() prints all the objects correctly without knowing the underlying format of the obejcts. The format means it does not know if it is array or dictionary or other etc..</p>
<pre><code class="language-python">class Helper():
    def __init__(self):
        pass
    @staticmethod
    def PrintAllNames(iterators):
        while iterators.HasNext():
            item = iterators.Next()
            print(&quot;The name is &quot;+item.Name)

student_ids = [3,5,1,9,8]
teachers = [Teacher(&quot;teacher a&quot;),Teacher(&quot;teacher b&quot;),Teacher(&quot;teacher c&quot;),Teacher(&quot;teacher d&quot;),Teacher(&quot;teacher e&quot;)]

#This is the student iterator to iterate the database
studentsIterator = Student.GetIterator(student_ids)
#This is the teach iterator to iterate the teachers object itself
teachersIterator = Teacher.GetIterator(teachers)


Helper.PrintAllNames(studentsIterator)
#outputs:
#The name is Students 5
#The name is Students 3
#The name is Students 1
#The name is Students 9
#The name is Students 8

Helper.PrintAllNames(teachersIterator)
#outputs:
#The name is teacher a
#The name is teacher b
#The name is teacher c
#The name is teacher d
#The name is teacher e
</code></pre>
<h3>Diagram</h3>
<p>I didn't show the teacher model and student model in the diagram as that is not important.</p>
<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/IteratorPattern/IteratorPattern.png" alt="Iterator Pattern"></p>
<h2>Example Code</h2>
<p><a href="https://github.com/Hao-Luo/DesignPattern/tree/master/IteratorPattern">Iterator Pattern Example</a></p>
<h2>Credit</h2>
<p>&lt;&lt; Head First Design Patterns &gt;&gt;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TEMPLATE PATTERN - TEMPLATE FOR PROCESSES/ALGORITHMS WITH FLEXIBILITY]]></title>
        <id>https://www.sporule.com/items/template-pattern-template-for-processes-algorithms-with-flexibility</id>
        <link href="https://www.sporule.com/items/template-pattern-template-for-processes-algorithms-with-flexibility"/>
        <updated>2019-04-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Template pattern sets the template for a logical process / algorithms that can be implemented in its children class.

In addition, using a hook in the template pattern provides the flexibility ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/TemplatePattern/TemplatePattern.png" alt="coverimage"></p>
<h2>What is Template Pattern</h2>
<p>Template pattern sets the template for a logical process / algorithms that can be implemented in its children class.</p>
<p>In addition, using a hook in the template pattern provides the flexibility for its children class to exectue functions that are special for the children class.</p>
<h2>Template Pattern Implementation</h2>
<p>The scenario of this example is cooking a meal.</p>
<p>We start from the parent class Meal, it has a function ConvertToMeal() which contains all the logic of the process for turning ingredients to a meal.</p>
<p>It also includes a function Hook() which is empty. Children class can implement the Hook() function to bring their own process into the template.</p>
<p>This Hook() is very useful and I will explain it later.</p>
<pre><code class="language-python">class Meal():
    def __init__(self,name):
        self._name=name
    
    def ConvertToMeal(self):
        self.Prepare()
        self.Cook()
        self.Hook()

    def Prepare(self):
        raise NotImplementedError(&quot;You need to implement this funcion&quot;)
    
    def Cook(self):
        raise NotImplementedError(&quot;You need to implement this funcion&quot;)
    
    def Hook(self):
        pass
</code></pre>
<p>We also have 2 child classes that inherit from the Meal class.</p>
<p>Vegetable does not have any function to add into its cooking process, so it does not need to override the function Hook().</p>
<p>Meal has an extra process by providing a wine, so it implements the function Hook()</p>
<pre><code class="language-python">class Vegetable(Meal):  

    def Prepare(self):
        print(self._name+&quot;: preparing vegetables&quot;)
    
    def Cook(self):
        print(self._name +&quot;: stir frying vegetables&quot;)

class Meat(Meal):  

    def Prepare(self):
        print(self._name+&quot;: preparing Meat&quot;)
    
    def Cook(self):
        print(self._name +&quot;: grilling meat&quot;)
    
    def Hook(self):
        print(self._name+&quot;: serving with wine&quot;)
</code></pre>
<p>Run Result:</p>
<pre><code class="language-python">pork = Meat(&quot;pork&quot;)
cabbage = Vegetable(&quot;cabbage&quot;)
pork.ConvertToMeal()
#output pork: preparing Meat
#output pork: grilling meat
#output pork: serving with wine
cabbage.ConvertToMeal()
#output cabbage: preparing vegetables
#output cabbage: stir frying vegetables
</code></pre>
<h3>Diagram</h3>
<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/TemplatePattern/TemplatePattern.png" alt="Template Pattern"></p>
<h2>Example Code</h2>
<p><a href="https://github.com/Hao-Luo/DesignPattern/tree/master/TemplatePattern">Template Pattern Example</a></p>
<h2>Credit</h2>
<p>&lt;&lt; Head First Design Patterns &gt;&gt;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FACADE PATTERN - DECOUPLES THE CLIENT AND THE COMPONENTS ON TOP OF ADAPTER PATTERN]]></title>
        <id>https://www.sporule.com/items/facade-pattern-decouples-the-client-and-the-components-on-top-of-adapter-pattern</id>
        <link href="https://www.sporule.com/items/facade-pattern-decouples-the-client-and-the-components-on-top-of-adapter-pattern"/>
        <updated>2019-03-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[It is very similar to the adapter pattern, but it simplify the interface for the client. By doing that, it also decouples the client and the components behind the interface.



Below ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/FacadePattern/FacadePattern.png" alt="coverimage"></p>
<h2>What is Facade Pattern</h2>
<p>It is very similar to the adapter pattern, but it simplify the interface for the client. By doing that, it also decouples the client and the components behind the interface.</p>
<h2>Adapter Pattern Implementation</h2>
<p>Below is a simple example of using Remote Control to turn on DVD Player and TV for watching movies.</p>
<p>First we have Remote Control, TV and DVD Player</p>
<pre><code class="language-python">class TV():
    def __init__(self,name):
        self._name=name
        
    @property
    def Name(self):
        return self._name
    
    def SwitchOn(self):
        print(self.Name +&quot; is on.&quot;)
        
class DVDPlayer():
    def __init__(self,name):
        self._name=name
        
    @property
    def Name(self):
        return self._name
    
    def Play(self):
        print(self.Name +&quot; is playing.&quot;)
        
class RemoteControl():
    def __init__(self,facade):
        self._facade = facade
    
    def WatchMovie(self):
        self._facade.On()
</code></pre>
<p>You can see that the TV has a function SwitchOn(), DVD Player has the function Play(), but the Remote Control has a function WatchMovie is calling the function On().</p>
<p>Now we create a new TV facade that combines the Play() and SwitchOn(), a fterthat we expose the On() function to the Remote Control</p>
<pre><code class="language-python">class TVFacade():
    def __init__(self,tv,dvd):
        self._tv=tv
        self._dvd = dvd
    
    def On(self):
        self._tv.SwitchOn()
        self._dvd.Play()
</code></pre>
<p>Run a test:</p>
<pre><code class="language-python">from models import RemoteControl
from models import TV
from models import TVFacade
from models import DVDPlayer

'''without adapter'''
tv = TV(&quot;ABC TV&quot;)
dvd = DVDPlayer(&quot;ABC DVD Player&quot;)

'''with adapter'''
#add adapter to connect tv and remote
tv_facade = TVFacade(tv,dvd)
control = RemoteControl(tv_facade)
control.WatchMovie() #output ABC TV is on and ABC DVD PLayer is playing
</code></pre>
<p>As you can see, the remote control can only see the function On(), which simplify the interface that the client can call. In addition, there is no direct connection(loose coupling) between the remote control and the components(DVD Player, TV).</p>
<h3>Diagram</h3>
<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/FacadePattern/FacadePattern.png" alt="AdapterPattern"></p>
<h2>Example Code</h2>
<p><a href="https://github.com/Hao-Luo/DesignPattern/tree/master/FacadePattern">Facade Pattern Example</a></p>
<h2>Credit</h2>
<p>&lt;&lt; Head First Design Patterns &gt;&gt;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ADAPTER PATTERN - CONNECTS TWO EXISTING COMPONENTS TOGETHER WITHOUT TOUCHING THEM]]></title>
        <id>https://www.sporule.com/items/adapter-pattern-connects-two-existing-components-together-without-touching-them</id>
        <link href="https://www.sporule.com/items/adapter-pattern-connects-two-existing-components-together-without-touching-them"/>
        <updated>2019-03-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Sometimes we want to integrate a vendor solution or a component that is not part of the design. As we can't change the vendors solution, and we don't want to ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/AdapterPattern/AdapterPattern.png" alt="coverimage"></p>
<h2>What is Adapter Pattern</h2>
<p>Sometimes we want to integrate a vendor solution or a component that is not part of the design. As we can't change the vendors solution, and we don't want to change how our application works. Adapter Pattern is very useful in this scenario, it adds a layer between our solution and the vendors solution.</p>
<h2>Adapter Pattern Implementation</h2>
<p>Below is a simple example of using Remote Control to control a TV.</p>
<p>First we have Remote Control and TV.</p>
<pre><code class="language-python">class TV():
    def __init__(self,name):
        self._name=name
        
    @property
    def Name(self):
        return self._name
    
    def SwitchOn(self):
        print(self.Name +&quot; is on.&quot;)

class RemoteControl():
    def __init__(self,tv):
        self._tv = tv
    
    def SwitchOnTV(self):
        self._tv.On()
</code></pre>
<p>You can see that the TV has a function SwitchOn(), but the Remote Control is calling the function On().</p>
<p>Now we create a new model that add the function On() in TV, the On() function will call the TV's SwtichOn() function.</p>
<pre><code class="language-python">class TVAdapter():
    def __init__(self,tv):
        self._tv=tv
    
    def On(self):
        self._tv.SwitchOn()
</code></pre>
<p>Run a test:</p>
<pre><code class="language-python">'''without adapter'''
tv = TV(&quot;ABC TV&quot;)
try:
    control = RemoteControl(tv)
    control.SwitchOnTV() #raise error, AttributeError: 'TV' object has no attribute 'On'
except Exception as ex:
    print(str(ex)) 

'''with adapter'''
#add adapter to connect tv and remote
tv_adapter = TVAdapter(tv)
control = RemoteControl(tv_adapter)
control.SwitchOnTV() #output ABC TV is on.
</code></pre>
<p>As you can see, without adapter it will throw an error. The adapter connects the TV and Remote together without changing the TV class or Remote class.</p>
<h3>Diagram</h3>
<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/AdapterPattern/AdapterPattern.png" alt="AdapterPattern"></p>
<h2>Example Code</h2>
<p><a href="https://github.com/Hao-Luo/DesignPattern/tree/master/AdapterPattern">Adapter Pattern Example</a></p>
<h2>Credit</h2>
<p>&lt;&lt; Head First Design Patterns &gt;&gt;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[COMMAND PATTERN - ENCAPSULATES ACTIONS AS OBJECT]]></title>
        <id>https://www.sporule.com/items/command-pattern-encapsulates-actions-as-object</id>
        <link href="https://www.sporule.com/items/command-pattern-encapsulates-actions-as-object"/>
        <updated>2019-02-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Command Pattern packages(encapsualtes) commands(actions) as a objects that can be injected into command runners. These objects will expose a public method( such as Do(), Exec() etc...) for the purpose of ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/CommandPattern/CommandPattern.png" alt="coverimage"></p>
<h2>What is Command Pattern</h2>
<p>Command Pattern packages(encapsualtes) commands(actions) as a objects that can be injected into command runners. These objects will expose a public method( such as Do(), Exec() etc...) for the purpose of triggering the actions. Simple command exectuers could be threads, computers, remote controls etc.. By dong this, the command runner does not need to know what are the commands as they will only execute the command objects' generic public function.</p>
<h2>Command Pattern Implementation</h2>
<p>In the example below, we are having one computer to exectue different commands in order. All exectued commands will be print to the screen.</p>
<p>I have a class command as the base class for other commands. This will be an interface for other languages.</p>
<pre><code class="language-python">class Command():
    def __init__(self,name):
        self._name=name
        
    @property
    def Name(self):
        return self._name
    
    def Do(self):
        raise NotImplementedError(&quot;You should implmenet this function&quot;)
</code></pre>
<p>And then I created few commands that inherits from Command</p>
<pre><code class="language-python">class CleanFilesCommand(Command):    
    def Do(self):
        print(&quot;Running - Name: &quot;+self.Name+ &quot; / Command: CleanFilesCommand.&quot;)

class PriceCheckCommand(Command):    
    def Do(self):
        print(&quot;Running - Name: &quot;+self.Name+ &quot; / Command: PriceCheckCommand.&quot;)

class ShoppingCommand(Command):    
    def Do(self):
        print(&quot;Running - Name: &quot;+self.Name+ &quot; / Command: ShoppingCommand.&quot;)
</code></pre>
<p>Created An Exectuer class which calls the commands Do()</p>
<pre><code class="language-python">class Exectuer():
    def __init__(self,name):
        self._name = name
        self._command=None
    
    def SetCommand(self,command):
        self._command = command
    
    def Execute(self):
        print(self._name + &quot;: &quot;)
        if self._command is None:
            print(&quot;No command to execute&quot;)
            return
        self._command.Do()
</code></pre>
<p>After that I created a first in first out job queue, all commands are added into the job queue.</p>
<pre><code class="language-python">#All the commands are First in First Out in a queue
q = queue.Queue()

#add some commands into the queue
q.put(PriceCheckCommand(&quot;PriceCheckCommand 1&quot;))
q.put(CleanFilesCommand(&quot;CleanFilesCommand 1&quot;))
q.put(PriceCheckCommand(&quot;PriceCheckCommand 2&quot;))
q.put(ShoppingCommand(&quot;ShoppingCommand 1&quot;))
q.put(CleanFilesCommand(&quot;CleanFilesCommand 2&quot;))
Initiate a New Exectuer to run all the commands from the queue

#add an exectuer computer 1
computer1 = Exectuer(&quot;Computer 1&quot;)
computer1.Execute()

while not q.empty():
    computer1.SetCommand(q.get())
    computer1.Execute()
</code></pre>
<p>Below is the output, as you can see different commands are exectued by the exectuer in first in first out order</p>
<pre><code class="language-python">'''output
Computer 1:
No command to execute
Computer 1:
Running - Name: PriceCheckCommand 1 / Command: PriceCheckCommand.
Computer 1:
Running - Name: CleanFilesCommand 1 / Command: CleanFilesCommand.
Computer 1:
Running - Name: PriceCheckCommand 2 / Command: PriceCheckCommand.
Computer 1:
Running - Name: ShoppingCommand 1 / Command: ShoppingCommand.
Computer 1:
Running - Name: CleanFilesCommand 2 / Command: CleanFilesCommand.
'''
</code></pre>
<h3>Diagram</h3>
<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/CommandPattern/CommandPattern.png" alt="Command Pattern"></p>
<h2>Example Code:</h2>
<p><a href="https://github.com/Hao-Luo/DesignPattern/tree/master/CommandPattern">Command Pattern Example</a></p>
<h2>Credit</h2>
<p>&lt;&lt; Head First Design Patterns &gt;&gt;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SINGLETON PATTERN - GLOBAL ACCESS TO ONLY ONE INSTANCE WHEN IS NEEDED]]></title>
        <id>https://www.sporule.com/items/singleton-pattern-global-access-to-only-one-instance-when-is-needed</id>
        <link href="https://www.sporule.com/items/singleton-pattern-global-access-to-only-one-instance-when-is-needed"/>
        <updated>2019-02-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Singleton Pattern is making sure that only one instance of the class can be created. Normally it is to make sure the data integrity. For example if you have two ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/SingletonPattern/SingletonPattern.png" alt="coverimage"></p>
<h2>What is Singleton Pattern</h2>
<p>Singleton Pattern is making sure that only one instance of the class can be created. Normally it is to make sure the data integrity. For example if you have two connections that connects to the database at the same time, then it may raise the conflict. Another example will be Caching, ideally we should only have 1 Cache for the system unless we have a valid reason to do it.</p>
<p>Singleton and Global Variable is very differnt, the main difference I found is Singleton is a lazy loading of Global variables. Global variables needs to be initated when starting the application, but Singleton will be initiated in the first usage.</p>
<h2>Singleton Pattern Implementation</h2>
<p>Below is a simple example of Cache Implementation.</p>
<p>Please do not use the below implmenetation for production in python, please use metaclass to implement Singleton in Python.</p>
<p>The reason that I came up with this implementation is to show an implementation that could apply to other languages.</p>
<p>We only have 1 class here which is Cache:</p>
<pre><code class="language-python">class Cache():
    _instance = None
    content = &quot;&quot;

    @staticmethod
    def GetInstance():
        if Cache._instance is None:
            Cache._instance = Cache()
        return Cache._instance
        
    def Add(self,content):
        #Assign Value to the content
        self.content = content
        print(self.content + &quot; is added to the cache&quot;)
    
    def Get(self):
        #Print the content
        print(&quot;The content is: &quot;+self.content)
</code></pre>
<p>In Python there is no static class concept, the class itself is kind of an instance, so I have put below test code to run:</p>
<pre><code class="language-python">from models import Cache

#create normal instance
cache_a = Cache()
cache_a.Add(&quot;Hello&quot;)

#Singleton
cache_s1 = Cache.GetInstance()
cache_s1.Add(&quot;This is Cache S1&quot;)

#Create another instance to check if this is the same instance as s1
cache_s2 = Cache.GetInstance()

#Testing the instance
cache_a.Get()
#output The content is: Hello
cache_s1.Get()
#output The content is: This is Cache S1
cache_s2.Get()
#output The content is: This is Cache S1
</code></pre>
<p>As you can see here, cache_a is a new instance of the Cache which it is own its own. So it prints &quot;Hello&quot; which is different compare to cache_s1 and cache_s2.</p>
<p>cache_s1 and cache_s2 are using the same instance, so they both print &quot;thi is cache s1&quot;.</p>
<h3>Diagram</h3>
<p>There is no class diagram for Singleton as there is only one class. I have attached a kind of &quot;process&quot; diagram</p>
<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/SingletonPattern/SingletonPattern.png" alt="Singleton Pattern"></p>
<h2>Example Code</h2>
<p><a href="https://github.com/Hao-Luo/DesignPattern/tree/master/SingletonPattern">Singleton Pattern Example</a></p>
<h2>Credit</h2>
<p>&lt;&lt; Head First Design Patterns &gt;&gt;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FUN FACT OF SLICE IN GOLANG]]></title>
        <id>https://www.sporule.com/items/fun-fact-of-slice-in-golang</id>
        <link href="https://www.sporule.com/items/fun-fact-of-slice-in-golang"/>
        <updated>2019-02-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Slice is a very important function in GoLang, which can help us to work with array easily.

However I just relised that GoLang only allows extention of Slice to the right, ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://www.vertica.com/wp-content/uploads/2019/07/Golang.png" alt="coverimage"></p>
<h2>Fun Fact</h2>
<p>Slice is a very important function in GoLang, which can help us to work with array easily.</p>
<p>However I just relised that GoLang only allows extention of Slice to the right, but not from the left.</p>
<p>In below example, we can drop the last four elements of slice by using X[:4] and then extend it back by using X[:6].</p>
<p>However we can't drop the first two elements and extend it back by using X[-2:]</p>
<pre><code class="language-go">func main() {
    //now we create an array rather than slice
    ar := [6]int{2, 3, 5, 7, 11, 13}
    fmt.Println(ar)
    //output [2 3 5 7 11 13]

    // Slice the slice to give it 2 length. However the capacity remain the same
    s := ar[:2]
    printSlice(s)
    //output len=2 cap=6 [2 3]

    // Extend its length.
    s = ar[:6]
    printSlice(s)
    //output len=6 cap=6 [2 3 5 7 11 13]

    // Drop its first two values. Capacity drops to 4
    s = ar[2:]
    printSlice(s)
    //output len=4 cap=4 [5 7 11 13]

    //s = ar[-2:]
    printSlice(s)
    //output error

    fmt.Println(ar)
    //output [2 3 5 7 11 13]
}

func printSlice(s []int) {
	fmt.Printf(&quot;len=%d cap=%d %v\n&quot;, len(s), cap(s), s)
}
</code></pre>
<p>By looking at the underlying array, the array still has the data that slice need to extend it back as dropping elements in slice will not impact the elements in the referenced array</p>
<pre><code class="language-go">func main() {
     ar := [6]int{2, 3, 5, 7, 11, 13}
     fmt.Println(ar)
     //output [2 3 5 7 11 13]
     // Slice the slice to give it 2 length.
     s := ar[:2]
     printSlice(s)
     //output len=2 cap=6 [2 3]
     // Extend its length.
     s = ar[:6]
     printSlice(s)
     //output len=6 cap=6 [2 3 5 7 11 13]
     // Drop its first two values.
     s = ar[2:]
     printSlice(s)
     //output len=4 cap=4 [5 7 11 13]
     //s = ar[-2:]
     printSlice(s)
     //output error
     fmt.Println(ar)
     //output [2 3 5 7 11 13]
}

func printSlice(s []int) {
    fmt.Printf(&quot;len=%d cap=%d %v\n&quot;, len(s), cap(s), s)
}
</code></pre>
<p>This is a bit weird but it is OK as it does not have a huge impact on array operations. I will update to this post once I figure it out the alternative.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FACTORY PATTERN - DO NOT DEPEND ON CONCRETE IMPLEMENTATIONS]]></title>
        <id>https://www.sporule.com/items/factory-pattern-do-not-depend-on-concrete-implementations</id>
        <link href="https://www.sporule.com/items/factory-pattern-do-not-depend-on-concrete-implementations"/>
        <updated>2019-01-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Factory Pattern removes code dependenices from the concrete objects,which means the caller of the code don't need to worry about the actual implemenation so the caller does not need to ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/FactoryPattern/Factory%20Pattern.png" alt="coverimage"></p>
<h2>What is Factory Pattern</h2>
<p>Factory Pattern removes code dependenices from the concrete objects,which means the caller of the code don't need to worry about the actual implemenation so the caller does not need to change when the underlying is changed.</p>
<p>A very simple example is we order takeaway from a shop, but we don't care how they cook it. It means the shop can change their ingredients or even their chief without impacting all its customers.</p>
<h2>Factory Pattern Implementation</h2>
<p>The below scenarios is to unlock your phone by using FaceId or Irirs.</p>
<p>We have phone and the implmentation of the phone:</p>
<pre><code class="language-python">class Phone():
    def __init__(self,name):
        raise NotImplementedError(&quot;You should implement this function&quot;)

    def Unlock(self):
        raise NotImplementedError(&quot;You should implement this function&quot;)

class iPhone(Phone):
    def __init__(self,name):
        self._name = &quot;iPhone X: &quot;+name
        print(self.Name)
 
    def Unlock(self):
        #faceID unlock
        print(self.Name+&quot; Phone is unlocked by face&quot;)

    @property
    def Name(self):
        return self._name

class SamsungPhone(Phone):
    def __init__(self,name):
        self._name = &quot;Samsung S8: &quot;+name
        print(self.Name)
    def Unlock(self):
        print(self.Name+&quot; Phone is unlocked by Iris&quot;)
    @property
    def Name(self):
        return self._name
</code></pre>
<p>Normal Implementation: we need to create an instance of the iPhone or Samsung Phone, and then call the function Unlock</p>
<pre><code class="language-python">#normal implementation, the caller of the function connects to all concreate classes.
iphone = iPhone(&quot;MyPhone&quot;)
samsung = SamsungPhone(&quot;MyPhone&quot;)
iphone.Unlock()
samsung.Unlock()

#output
'''
iPhone X: MyPhone
Samsung S8: MyPhone
iPhone X: MyPhone is unlocked by face
Samsung S8: MyPhone Phone is unlocked by Iris
'''
</code></pre>
<p>Factory Pattern Implementation: We created a phone factory to take the responsibilities of creating phone instance</p>
<pre><code class="language-python">class PhoneFactory():
    @staticmethod
    def CreatePhone(name):
        if(name==&quot;iphone&quot;):
            return iPhone(&quot;From Factory: MyPhone&quot;)
        if(name==&quot;samsung&quot;):
            return SamsungPhone(&quot;From Factory: MyPhone&quot;)
        else:
            return &quot;We dont have the phone you want.&quot;
</code></pre>
<p>Then we call phone factory to get the instance of different phones, by doing this, we remove the dependencies between the caller and the implementation of phones</p>
<pre><code class="language-python">#factory method, the caller of the function connects to only an abstract factory
factory = PhoneFactory()
iphoneNew = factory.CreatePhone(&quot;iphone&quot;)
samsungNew = factory.CreatePhone(&quot;samsung&quot;)
iphoneNew.Unlock()
samsungNew.Unlock()

#output
'''
iPhone X: From Factory: MyPhone
Samsung S8: From Factory: MyPhone
iPhone X: From Factory: MyPhone is unlocked by face
Samsung S8: From Factory: MyPhone Phone is unlocked by Iris
'''
</code></pre>
<h3>Diagram</h3>
<p>The normal implementation is solid black line and the factory pattern is solid red line.</p>
<p>As you can tell from the diagram, Phone factory is the only dependency for the caller in factory pattern. It means caller do not care about phone changes.</p>
<p>In normal Implementation, the caller has a direct connection to other phone implementations, which means any changes in phone implementations will result a change in the caller.</p>
<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/FactoryPattern/Factory%20Pattern.png" alt="Factory Pattern"></p>
<h2>Example Code</h2>
<p><a href="https://github.com/Hao-Luo/DesignPattern/tree/master/FactoryPattern">Factory Pattern Example</a></p>
<h2>Credit</h2>
<p>&lt;&lt; Head First Design Patterns &gt;&gt;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DECORATOR PATTERN - ADD BEHAVIOUR TO EXISTING FUNCTIONS]]></title>
        <id>https://www.sporule.com/items/decorator-pattern-add-behaviour-to-existing-functions</id>
        <link href="https://www.sporule.com/items/decorator-pattern-add-behaviour-to-existing-functions"/>
        <updated>2019-01-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Decorator Pattern can change a function without making any changes in the function. It means the changes of the function would not impact any existing code.



A website was built for ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Decorator_UML_class_diagram.svg/400px-Decorator_UML_class_diagram.svg.png" alt="coverimage"></p>
<h2>What is Decorator Pattern</h2>
<p>Decorator Pattern can change a function without making any changes in the function. It means the changes of the function would not impact any existing code.</p>
<h2>The Problem</h2>
<p>A website was built for sharing local news. Now they want to build the API to share content with other developers.</p>
<p>They were thinking adding a new function in the content to output json, but it invovles change of the current tested code.</p>
<p>As a solution, decorator can help them to add output json into the function without changing any existing code.</p>
<h2>Decorator Pattern Implementation</h2>
<p>We have an existing tested Content class to output content:</p>
<pre><code class="language-python">class Content():
    def __init__(self,content):
        self._content = content
    def export_content(self):
        return self._content
</code></pre>
<p>We will create a Output_type class to output the content in the specific format:</p>
<pre><code class="language-python">class Output_type():
    @staticmethod
    def to_json(content):
        return &quot;This is json format: &quot;+ content
</code></pre>
<p>We can wrap the Content.export_content into the Output_type.to_json. In this example, as to_json is genenral to all type of content, so we wrap the output content of Content.export_content. You can wrap a function as well.</p>
<pre><code class="language-python">from models.content import Content
from models.output_type import Output_type

b = Content(&quot;this is fun&quot;)
print(b.export_content())
print(Output_type.to_json(b.export_content()))

#output is :
#this is fun
#This is json format: this is fun
</code></pre>
<p>Above is a very simple example of decorator. Nowadays, most of the modern programming language has a nice way to implement decorators, below is a simple example in python.</p>
<p>We added a wrapper function in Output_type class. *args and **kwargs are the arguments from the pass in function.</p>
<pre><code class="language-python">class Output_type():
    @staticmethod
    def to_json(content):
        return &quot;This is json format: &quot;+content

    @staticmethod
    def to_json_decorator(func):
        def func_wrapper(*args,**kwargs):
            return &quot;This is decorator format: &quot;+ Output_type.to_json(func(*args,**kwargs))
        return func_wrapper
</code></pre>
<p>In addition, we added a new function export_content_decorator in the Content class. We can also create this function outside the Content class as it is a simple wrapper of the existing export_content function.</p>
<pre><code class="language-python">from .output_type import Output_type  

class Content():
    def __init__(self,content):
        self._content = content
    def export_content(self):
        return self._content

    @Output_type.to_json_decorator
    def export_content_decorator(self):
        return self.export_content()
</code></pre>
<p>As you can see, the export_content_decorater has a decorater @Output_type.to_json_decorator. It bascially perform the same behaviour as our previous general decorator(I have added &quot;This is decorator format:&quot; in the front to seperate them).</p>
<pre><code class="language-python">from models.content import Content
from models.output_type import Output_type

b = Content(&quot;this is fun&quot;)
print(b.export_content())
print(Output_type.to_json(b.export_content()))
print(b.export_content_decorator())

#output:
#this is fun
#Output from general decorator: This is json format: this is fun
#Output from Python decorator: This is decorator format: This is json format: this is fun
</code></pre>
<h3>Diagram (From Wikipedia)</h3>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Decorator_UML_class_diagram.svg/400px-Decorator_UML_class_diagram.svg.png" alt="Decorator Pattern"></p>
<h2>Key Message To Take Away</h2>
<p>Decorator Pattern is very common in the daily usage, such as authentication, content output etc.</p>
<p>The key message to remember is Decorator Pattern is trying to add new function to existing functions without making changes on existing tested code. Also it helps reduce duplication of code. For example we can reuse json output decorator in any string type of content.</p>
<h2>Example Code</h2>
<p><a href="https://github.com/Hao-Luo/DesignPattern/tree/master/DecoratorPattern">Decorator Pattern</a></p>
<h2>Credit</h2>
<p>&lt;&lt; Head First Design Patterns &gt;&gt;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OBSERVER PATTERN - A-UPDATE-ALL CAN BE BETTER THAN ALL-CHECK-A]]></title>
        <id>https://www.sporule.com/items/observer-pattern-a-update-all-can-be-better-than-all-check-a</id>
        <link href="https://www.sporule.com/items/observer-pattern-a-update-all-can-be-better-than-all-check-a"/>
        <updated>2018-12-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[- From the book: The Observer Pattern defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically.
- From ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/ObserverPattern/Class%20Diagram.jpg" alt="coverimage"></p>
<h2>What is Observer Pattern</h2>
<ul>
<li>From the book: The Observer Pattern defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically.</li>
<li>From me: The Observer Pattern is trying to resolve the problem of coupling in a &quot;One&quot; to &quot;Many&quot; relationship by handed over the update responsibilities to the &quot;One&quot;.</li>
</ul>
<h2>The Problem</h2>
<p>At the beginning of smart phone (Nokia), we don't have push notification for our smart phones. We will need to open the app and then check with the server to see if there are any updates.</p>
<p>As a result, the battery runs out quickly because the manually checking, the server may get overloaded because of the requests.</p>
<p>Nowadays we don't do it any more because of the push services, our phone is notified when we have a new message.</p>
<p>This is the meaning of A-Update-All can be better than All-Check-A.</p>
<h2>Observer Pattern Implementation</h2>
<p>For better understanding, I have implemented a extremly simple observer pattern by using the example of newslettter.</p>
<p>The scenario is customer will receive notification when there is a new newsletter.</p>
<p>We create an interface/abstract class for Both newsletter and subscriber, although I don't normally program to interface in a small system.</p>
<p>The newsletter object will have the function to add_subscriber and remove_subscriber</p>
<pre><code class="language-python">class Newsletter():
    def __init__(self):
        self._subscribers = []

    def add_subscriber(self, subscriber):
        self._subscribers.append(subscriber)

    def remove_subscriber(self,subscriber):
        self._subscribers.remove(subscriber)

    def notify_subscribers(self):
        raise NotImplementedError(&quot;You should implement this function&quot;)

class Subscriber():
    def __init__(self,name):
        self._name = name

    @property
    def Name(self):
        return self._name
    def get_notification(self,content):
        print(self.Name +': I have just receied '+content+' subscription!.')
</code></pre>
<p>Then we create the actual class that inheri from its interface, as it is a very simple example so I didn't put any functions or properties for the classes.</p>
<pre><code class="language-python">from models import Newsletter 
class Fashion_newsletter(Newsletter):
    def notify_subscribers(self,content):
        for subscriber in self._subscribers:
            subscriber.get_notification('new fashion newsletter: '+content)


from models import Subscriber

class Customer(Subscriber):
    def random(self):
        pass

</code></pre>
<p>As you can tell there is a notify_subscribers function to call the subscriber's get_notification function, this is bascially what Observer Pattern it is.</p>
<p>The implementation of the Observer Pattern is  loose coupling as the Newsletter and Subscriber are indepently of each other.</p>
<h3>Diagram</h3>
<p><img src="https://raw.githubusercontent.com/Hao-Luo/DesignPattern/master/ObserverPattern/Class%20Diagram.jpg" alt="Observer Pattern"></p>
<h2>Key Message To Take Away</h2>
<blockquote>
<ul>
<li>Observer Pattern is a very common pattern as you can see it in most of the programming languages, such as Events and Delegates.</li>
<li>Observer Pattern is mainly for the purpose of loose coupling, one of the benefit is easy to write unit test.</li>
<li>A-Update-All can be better than All-Check-A</li>
</ul>
</blockquote>
<h2>Example Code</h2>
<p><a href="https://github.com/Hao-Luo/DesignPattern/tree/master/ObserverPattern">Observer Pattern Example</a></p>
<h2>Credit</h2>
<p>&lt;&lt; Head First Design Patterns &gt;&gt;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[TAGCLOSER - A PYTHON PACKAGE TO HELP YOU TO CLOSE UNCLOSED HTML TAGS]]></title>
        <id>https://www.sporule.com/items/tagcloser-a-python-package-to-help-you-to-close-unclosed-html-tags</id>
        <link href="https://www.sporule.com/items/tagcloser-a-python-package-to-help-you-to-close-unclosed-html-tags"/>
        <updated>2018-12-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The reason for me to create this package is I have had excerpt issues in my blog.

My blog's layout will change if my post excerpt have unclosed tag, I was ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/xccQnBJ.png" alt="coverimage"></p>
<h2>The Concept</h2>
<p>The reason for me to create this package is I have had excerpt issues in my blog.</p>
<p>My blog's layout will change if my post excerpt have unclosed tag, I was using a plain text excerpt to replace HTML excerpt but it does not look great.</p>
<p>The solution itself is very simple, the logic is:</p>
<ul>
<li>Finding all open html tags and close tags</li>
<li>Match open tags with close tags, find the tags that are not closed</li>
<li>Close the unclosed tags by adding them at the end of the excerpt</li>
</ul>
<p>It is dead simple but I think it is very useful.</p>
<h2>How To Use</h2>
<h3>Installing</h3>
<p>Install it through pip</p>
<pre><code class="language-python">pip install tagcloser
</code></pre>
<h3>Integrate with your code</h3>
<pre><code class="language-python">import tagcloser

sample_html = '&lt;div&gt;This is a unclosed tag html'
closed_html = tagcloser.close_tags(sample_html)
#It will return '&lt;div&gt; This is a unclosed tag html &lt;/div&gt;'
</code></pre>
<h3>Github Repositry</h3>
<p><a href="https://github.com/Hao-Luo/TagCloser">TagCloser</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[STRATEGY PATTERN - HAS-A CAN BE BETTER THAN IS-A]]></title>
        <id>https://www.sporule.com/items/strategy-pattern-has-a-can-be-better-than-is-a</id>
        <link href="https://www.sporule.com/items/strategy-pattern-has-a-can-be-better-than-is-a"/>
        <updated>2018-11-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[- From the Book: The Strategy Pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.
- ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/hao-hao-hao/DesignPattern/master/StrategyPattern/Class%20Diagram.jpg" alt="coverimage"></p>
<h2>What is Strategy Pattern</h2>
<ul>
<li>From the Book: The Strategy Pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.</li>
<li>From me: Strategy Pattern is trying to resolve the problem of inheritance by using composition( Has-a rather than Is-a ).</li>
</ul>
<h2>The Problem</h2>
<p>In this example, we own different cars and we have different ways(or no way) to charge their batteries.</p>
<p>Please aware that the example may be non sense.</p>
<p>For example :</p>
<table>
<thead>
<tr>
<th>Car Type</th>
<th>Where to Charge</th>
</tr>
</thead>
<tbody>
<tr>
<td>Eletric Car</td>
<td>At Home</td>
</tr>
<tr>
<td>Plugin Hybrid Car</td>
<td>At Station</td>
</tr>
<tr>
<td>Sports Car</td>
<td>Can't Charge</td>
</tr>
</tbody>
</table>
<h2>Inheritance Style Implementation</h2>
<p>By using inheritance, we can simply create a base model Car with a function charge().</p>
<pre><code class="language-python">class Car():
    &quot;&quot;&quot;Base class of all cars&quot;&quot;&quot;

    def charge(self):
        print(&quot;Charge my car&quot;)
</code></pre>
<p>Then implement the charge()  individually in the children class.</p>
<pre><code class="language-python">class Sports_Car(Car):
    def __init__(self, registration):
        super().__init__(registration)

    def display(self):
        print(&quot;I am a Sports Car&quot;)

    def charge(self):
        print(&quot;I can't charge my car&quot;)
</code></pre>
<p>However, it is very hard to reuse the code and keep consistent of all the children.</p>
<h2>Strategy Pattern Style Implementation:</h2>
<p>It is similar as the inheritance style, we simply create a base model Car with a property charge_behaviour.</p>
<pre><code class="language-python">class Car():
    &quot;&quot;&quot;Base class of all cars&quot;&quot;&quot;

    @property
    def charge_behaviour(self):
        return self._charge_behaviour
</code></pre>
<p>Instead of individual implementation, we create an interface/abstract class  call Charge Behaviour.</p>
<pre><code class="language-python">class Charge_Behaviour(metaclass=abc.ABCMeta):
    &quot;&quot;&quot;This is the charge behaviour abstract class&quot;&quot;&quot;
    @abc.abstractmethod
    def charge(self):
        raise NotImlementError()
</code></pre>
<p>And then we create different behaviour that is inherited from Charge Behaviour</p>
<pre><code class="language-python">class Charge_at_Home(Charge_Behaviour):
    def charge(self):
        print(&quot;I am charging at home&quot;)

class Charge_at_Station(Charge_Behaviour):
    def charge(self):
        print(&quot;I am charging my car at the station&quot;)

class Cant_Charge(Charge_Behaviour):
    def charge(self):
        print(&quot;I can't charge my car&quot;)
</code></pre>
<p>In the Car class, we added some condition for charge behaviour setter which only allow Charge Behaviour Instance.</p>
<p>In addition, we create a charge() function in the Car class which runs the charge_behaviour.charge()</p>
<pre><code class="language-python">class Car():
    &quot;&quot;&quot;Base class of all cars&quot;&quot;&quot;
    @property
    def charge_behaviour(self):
        return self._charge_behaviour

    @charge_behaviour.setter
    def charge_behaviour(self, value):
        &quot;&quot;&quot;only allow to set behaviour if it is the instance of Charge_Behaviour
        &quot;&quot;&quot;
        if(isinstance(value,Charge_Behaviour)):
            self._charge_behaviour = value
        else:
            print(&quot;Sorry, the behaviour you selected is not a charge behaviour&quot;)

    def charge(self):
        self.charge_behaviour.charge()
</code></pre>
<p>The children classes are not overriding the parent class's charge(), it create a new instance of Charge Behaviour and assign it to the charge_behaviour property in the constructor:</p>
<pre><code class="language-python">class Eletric_Car(Car):
    def __init__(self,registration):
        super().__init__(registration)
        self.charge_behaviour = Charge_at_Home()

class Plugin_Hybrid_Car(Car):
    def __init__(self, registration):
        super().__init__(registration)
        self.charge_behaviour = Charge_at_Station()

class Sports_Car(Car):
    def __init__(self, registration):
        super().__init__(registration)
        self.charge_behaviour= Cant_Charge()
</code></pre>
<p>(Please note that this is not the best practise as we are creating a new instance in constructor, but we will fix this after I finish reading the Book.)</p>
<p>In this way, we can easily switch its charge behaviour at run time, such as:</p>
<pre><code class="language-python">#PHEV Car
print (&quot;PHEV Car:&quot;)
phcar = Plugin_Hybrid_Car(&quot;CCC42AC&quot;)
#change the behaviour at run time
phcar.charge_behaviour = Cant_Charge()
phcar.charge()
</code></pre>
<h3>Diagram</h3>
<p><img src="https://raw.githubusercontent.com/hao-hao-hao/DesignPattern/master/StrategyPattern/Class%20Diagram.jpg" alt="Strategy Pattern"></p>
<h2>Key Message To Take Away</h2>
<p>Favour composition over inheritance (Has A is better than Is A)
Identify the aspects of vary and separate them from what stays the same.
Program to an interface, not an implementation. (We used different charge hehaviour class to implement the behaviour rather than implementing them in the parent Car class or Children classes)</p>
<h2>Example Code</h2>
<p><a href="https://github.com/hao-hao-hao/DesignPattern/tree/master/StrategyPattern">Strategy Pattern Example</a></p>
<h2>Credit</h2>
<p>&lt;&lt; Head First Design Patterns &gt;&gt;</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DROP ALL TABLES IN THE MICROSOFT SQL SERVER]]></title>
        <id>https://www.sporule.com/items/drop-all-tables-in-the-microsoft-sql-server</id>
        <link href="https://www.sporule.com/items/drop-all-tables-in-the-microsoft-sql-server"/>
        <updated>2018-11-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Sometimes it is a pain to drop the database and recreate it, now I found a script that can drop all tables in the database which is nice.

```bash
DECLARE @Sql NVARCHAR(500) ......]]></summary>
        <content type="html"><![CDATA[<p><img src="http://www.wisetrack.com/wp-content/uploads/2018/05/1768.sql_logo.png" alt="coverimage"></p>
<h2>Main Topic</h2>
<p>Sometimes it is a pain to drop the database and recreate it, now I found a script that can drop all tables in the database which is nice.</p>
<pre><code class="language-bash">DECLARE @Sql NVARCHAR(500) DECLARE @Cursor CURSOR

SET @Cursor = CURSOR FAST_FORWARD FOR
SELECT DISTINCT sql = 'ALTER TABLE [' + tc2.TABLE_NAME + '] DROP [' + rc1.CONSTRAINT_NAME + ']'
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc1
LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc2 ON tc2.CONSTRAINT_NAME =rc1.CONSTRAINT_NAME

OPEN @Cursor FETCH NEXT FROM @Cursor INTO @Sql

WHILE (@@FETCH_STATUS = 0)
BEGIN
Exec sp_executesql @Sql
FETCH NEXT FROM @Cursor INTO @Sql
END

CLOSE @Cursor DEALLOCATE @Cursor
GO

EXEC sp_MSforeachtable 'DROP TABLE ?'
GO
</code></pre>
<h2>Credit</h2>
<p>Original from <a href="https://social.msdn.microsoft.com/Forums/sqlserver/en-US/a512be8a-376f-4fc9-8243-78dbdbe59e55/how-to-deletedrop-all-the-tables-from-sql-server-database-without-using-enterprise-manager?forum=transactsql">Here</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[INTEGRATION OF CKEDITOR 4 WITH IMGUR PLUGIN (IMAGE UPLOADING)]]></title>
        <id>https://www.sporule.com/items/integration-of-ckeditor-4-with-imgur-plugin--image-uploading</id>
        <link href="https://www.sporule.com/items/integration-of-ckeditor-4-with-imgur-plugin--image-uploading"/>
        <updated>2018-10-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I was trying out different rich text editors for web, they all good but I found CKEditor 4 is the easiest to set up.





Go to CKEditor Builder.
Click download after you ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://ckeditor.com/assets/images/og/ogimage-ck4-1ea514a336.png" alt="coverimage"></p>
<h2>Introduction</h2>
<p>I was trying out different rich text editors for web, they all good but I found CKEditor 4 is the easiest to set up.</p>
<h2>How to Implement</h2>
<h3>Download</h3>
<p>Go to <a href="https://ckeditor.com/cke4/builder">CKEditor Builder</a>.
Click download after you pick the plugins, skins and langauges you want. Save the CKEditor files in the server. You can delete the example folder.</p>
<h3>Insert into your html file</h3>
<ul>
<li>Add a textarea with id editor in your page.</li>
</ul>
<pre><code class="language-javascript">&lt;textarea id=&quot;editor&quot;&gt;&lt;/textarea&gt;
</code></pre>
<ul>
<li>Load the ckeditor.js and the config.js from the downloaded files.</li>
</ul>
<pre><code class="language-javascript">&lt;!-- CK  Editor Module --&gt;
&lt;script src=&quot;/static/ckeditor/ckeditor.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/static/ckeditor/config.js&quot;&gt;&lt;/script&gt;
</code></pre>
<ul>
<li>Use Javascript in the page to initiate the CKEditor.</li>
</ul>
<pre><code class="language-javascript">CKEDITOR.replace( '#editor' );
</code></pre>
<ul>
<li>Thats it, check your page and you will be able to see the CKEditor.</li>
<li>For uploading image, I have selected the Imgur plugin which allows me to upload the image to Imgur (Imgur is a free online image storage cloud) easily, what you need is a Client Id from the Imgur API, and then add it to the config.js</li>
</ul>
<pre><code class="language-javascript">config.extraPlugins = 'imgur';
config.imgurClientId = 'Your-Client-id';
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LEARN D3.JS AND BUILD A SIMPLE MIND MAP WEB APPLICATION IN A DAY WITH FLASK]]></title>
        <id>https://www.sporule.com/items/learn-d3js-and-build-a-simple-mind-map-web-application-in-a-day-with-flask</id>
        <link href="https://www.sporule.com/items/learn-d3js-and-build-a-simple-mind-map-web-application-in-a-day-with-flask"/>
        <updated>2018-10-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[D3.js it is a popular tool for Data Visualisation, I have spent a day to explore it and built a simple mind map application.

The application structure is quiet simple:

- Back-end: ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2017/06/d3logo.png?fit=590%2C313&amp;ssl=1" alt="coverimage"></p>
<h2>Introduction</h2>
<p>D3.js it is a popular tool for Data Visualisation, I have spent a day to explore it and built a simple mind map application.</p>
<p>The application structure is quiet simple:</p>
<ul>
<li>Back-end: Web API by Flask in Python</li>
<li>Front-end: D3.js</li>
</ul>
<p><img src="https://i.imgur.com/RJHtEm1.png" alt="mind map"></p>
<p>As the focus is mainly on trying the D3.js, so the web api doesn't come with any security implementation.</p>
<p>In addition, the JavaScript code is not organised very well. I might improve the code in the future if I have some spare time.</p>
<h2>Key Feature of D3.js</h2>
<p>The only key feature I learned from the day is D3.js provides a very simple way to select New Data, Modified Data and Removed Data.</p>
<ol>
<li>
<p>New Data is accessed by blocks.enter()</p>
</li>
<li>
<p>Modified Data is accessed by blocks</p>
</li>
<li>
<p>Removed Data is accessed by blocks.exit()</p>
</li>
</ol>
<p>These three functions enable the developer to update the graph simply.</p>
<h2>Implementation</h2>
<h3>Functionality of the Mind Map app</h3>
<ol>
<li>
<p>Add a new mind block by left click any empty spaces</p>
</li>
<li>
<p>Create a link between mind blocks by dragging from one to the other.</p>
</li>
<li>
<p>Move mind blocks by dragging the special area in the block.</p>
</li>
<li>
<p>Auto size of the mind blocks according to the content length.</p>
</li>
<li>
<p>Save the current layout and blocks by click save.</p>
</li>
</ol>
<h3>What is the Design</h3>
<ol>
<li>
<p>Created two global arrays(Not a good practise): Blocks_Data for block information and Links_Data(Contains Parent and Child Information) for block links information</p>
</li>
<li>
<p>Few functions to implement the link the blocks and store the information into Links_Data</p>
</li>
<li>
<p>Convert two global arrays to JSON and save into the database through Web API.(Not a good practise)</p>
</li>
</ol>
<h3>Check The Code</h3>
<p>Please do check the GitHub code if you want to know the details, the repository is <a href="https://github.com/hao-hao-hao/D3MindMap">hao-hao-hao/D3MindMap</a> .</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[USE FLASK-MIGRATE TO UPDATE THE STRUCTURE AND COLUMNS OF THE CURRENT DATABASE]]></title>
        <id>https://www.sporule.com/items/use-flask-migrate-to-update-the-structure-and-columns-of-the-current-database</id>
        <link href="https://www.sporule.com/items/use-flask-migrate-to-update-the-structure-and-columns-of-the-current-database"/>
        <updated>2018-09-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This website(Sporule) is built by using Flask and Flask-SqlAlchemy (an Object Relational Mapping tool) which maps all the model classes to the database.

Any changes in the model class will need ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://i.ytimg.com/vi/BAOfjPuVby0/maxresdefault.jpg" alt="coverimage"></p>
<h2>The Problem</h2>
<p>This website(Sporule) is built by using Flask and Flask-SqlAlchemy (an Object Relational Mapping tool) which maps all the model classes to the database.</p>
<p>Any changes in the model class will need the change of the database. Even though it is possible, but it is time consuming.</p>
<p>Flask-Migrate(flask-migrate.readthedocs.io) provided us an easy way to update our database after the changing of model classes, please be aware that you will still need to change the Flask-Migrate generated scripts if the models change is huge (such as database relationship change).</p>
<h2>The Solution</h2>
<h3>Step 1</h3>
<p>use pip to install Flask-Migrate in your environment or virtual environment</p>
<h3>Step 2</h3>
<p>Initiate the Flask-Migrate with Flask-SqlAlchemy and the Flask App instance</p>
<pre><code class="language-python">from flask_sqlalchemy import SQLAlchemy
from flask import Flask
from flask_migrate import Migrate

#create app instance
app = Flask(__name__)

# Create SQLAlchemy instance
db = SQLAlchemy()
db.init_app(app)

#Initiate Flask-Migrate
Migrate(app, db)
</code></pre>
<h3>Step 3</h3>
<p>In terminal, please setup the system environment variable &quot;FLASK_APP&quot; to the startup flask file such as run.py or app.py in your environment or virtual environment</p>
<pre><code class="language-bash">#setup FLASK_APP environment variable
export FLASK_APP=run.py
</code></pre>
<h3>Step 4</h3>
<p>In the root folder of the Flask app, where the startup flask file is, initiate the flask-migrate which will create a migration folder</p>
<pre><code class="language-bash">#type below in the terminal
$ flask db init
</code></pre>
<h3>Step 5</h3>
<p>Type below line in the terminal to generate migrate script which will be stored in migrations/versions/ , you can review it to see if it looks OK.</p>
<pre><code class="language-bash">$ flask db migrate
</code></pre>
<h3>Step 6</h3>
<p>Execute the script to update the database structure</p>
<pre><code class="language-bash">$ flask db upgrade
</code></pre>
<h3>Notes</h3>
<p>In the future, you just need to repeat step 5 and 6 to update the structure of the database.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PYENV VIRTUALENV'S PIP IS INSTALLING IN GLOBAL SITE-PACKAGES INSTEAD OF VIRTUALENV (PIP PERMISSION ISSUES)]]></title>
        <id>https://www.sporule.com/items/pyenv-virtualenvs-pip-is-installing-in-global-site-packages-instead-of-virtualenv-pip-permission-issues</id>
        <link href="https://www.sporule.com/items/pyenv-virtualenvs-pip-is-installing-in-global-site-packages-instead-of-virtualenv-pip-permission-issues"/>
        <updated>2018-09-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I was having issue in my virtual environment that my PIP does not have permission to install packages because all the virtual environment packages were installed in the global site-packages ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://zaxrosenberg.com/wp-content/uploads/2017/06/python-virtualenv.jpg" alt="coverimage"></p>
<h2>The Problem</h2>
<p>I was having issue in my virtual environment that my PIP does not have permission to install packages because all the virtual environment packages were installed in the global site-packages rather than the virtualenv's site-packages. I think the issue was caused by using sudo to install the virutal environemnt which changed the System Environment Variable.</p>
<h2>The Solution</h2>
<p>After some research on Google, I have found a few solutions:</p>
<h3>Step 1</h3>
<p>The System environment variable &quot;PATH&quot; was set in the environment variable, we need to remove that so it can be pointed correctly to the virtual environment. Solution is typing the below code in the terminal:</p>
<pre><code class="language-bash">$PATH
</code></pre>
<h3>Step 2</h3>
<p>You can see the System environment variable &quot;PATH&quot; was set to the local bin, such as:</p>
<pre><code class="language-bash">PATH=/home/&lt;yourusername&gt;/bin:/home/&lt;yourusername&gt;/.local/bin:/home/&lt;yourusername&gt;/.pyenv/shims:~/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
</code></pre>
<h3>Step 3</h3>
<p>The solution will be remove the parts that include bin and /.local/bin from the environment, so type the below code in the terminal:</p>
<pre><code class="language-bash">PATH=/home/&lt;yourusername&gt;/.pyenv/shims:~/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[USING MGOV2 FOR QUERYING MONGODB IN GOLANG WITH SOME EXTRA HELPER FUNCTIONS]]></title>
        <id>https://www.sporule.com/items/using-mgov2-for-querying-mongodb-in-golang-with-some-extra-helper-functions</id>
        <link href="https://www.sporule.com/items/using-mgov2-for-querying-mongodb-in-golang-with-some-extra-helper-functions"/>
        <updated>2018-07-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[MongoDB is one of the common NOSQL databases to use, however it does not have a stable ODM to support Golang.

It means we need to use the MgoV2 (mongodb driver) ......]]></summary>
        <content type="html"><![CDATA[<p><img src="https://hackernoon.com/hn-images/1*WpUuwCQZWhVzP3X0Gibaqw.png" alt="coverimage"></p>
<h2>Introduction</h2>
<p>MongoDB is one of the common NOSQL databases to use, however it does not have a stable ODM to support Golang.</p>
<p>It means we need to use the MgoV2 (mongodb driver) to create our own implementation.</p>
<h2>Implementation</h2>
<h3>Installation</h3>
<p>First of all, we need to install the Mgov2, simply use go get:</p>
<pre><code class="language-bash">go get gopkg.in/mgo.v2
</code></pre>
<h3>Integration</h3>
<p>To start with, I created a MongoDB strcut to store the session as well as a function to return copied sessions</p>
<pre><code class="language-go">//MongoDB Type is simply a holder
type MongoDB struct {
	//This original session is not open to public
	session *mgo.Session
	//Session provides a copied session for operations, remember to close it by using defer session.Close()
	Session func() *mgo.Session
}
</code></pre>
<p>Now we need to build a constructor for the MongoDB to initate the session</p>
<pre><code class="language-go">import (
	&quot;gopkg.in/mgo.v2&quot;
	&quot;gopkg.in/mgo.v2/bson&quot;
)

//NewMongoDB initiates the db session
func NewMongoDB(host, database, username, password string, dropDB bool) (*MongoDB, error) {
	db := &amp;MongoDB{}
	var err error
	//create a new session
	db.session, err = mgo.DialWithInfo(
		&amp;mgo.DialInfo{
			Username: username,
			Password: password,
			Database: database,
			Addrs:    []string{host},
		},
	)
	if err != nil {
		return nil, err
	}
	//set up the Session fucntion to return a copy of the db session
	db.Session = func() *mgo.Session { return db.session.Copy() }

	if dropDB {
		//This is purely for testing purpose, it will drop the database if it is true.
		db.dropDatabase()
	}
	return db, nil
}
</code></pre>
<p>After having a session, we need to implement some basic functions for MongoDB CRUD opeartions.</p>
<pre><code class="language-go">//collection provides a copied session as well as its collection, this is a helper function for CRUD
func (db *MongoDB) collection(collection string) (*mgo.Session, *mgo.Collection) {
	s := db.Session()
	c := s.DB(Config.Database).C(collection)
	return s, c
}

//Create provides Insert Operation for Database
func (db *MongoDB) Create(collection string, item interface{}) error {
	//get the session and collection
	s, c := db.collection(collection)
	//close the session after usage
	defer s.Close()
	//run the Insert function
	err := c.Insert(item)
	return err
}


//Get takes in the table name, pointer to the single obejct,
//mongodb query and a hook function to implement the extra query such as select,slice..
//the result will be return to the object pointer
func (db *MongoDB) Get(table string, object, query interface{}, extraQuery func(*mgo.Query) *mgo.Query) error {
	s, c := db.collection(table)
	defer s.Close()
	q := c.Find(query)
	if extraQuery != nil {
		//run queries in the hook if the hook is not empty
		q = extraQuery(q)
	}
	err := q.One(object)
	return err
}

//GetAll takes in the table name, pointer to the obejct array,
//mongodb query and a hook function to implement the extra query such as select,slice..
//the result will be return to the object array pointer
func (db *MongoDB) GetAll(table string, objects, query interface{}, extraQuery func(*mgo.Query) *mgo.Query) error {
	s, c := db.collection(table)
	defer s.Close()
	q := c.Find(query)
	if extraQuery != nil {
		//run queries in the hook if the hook is not empty
		q = extraQuery(q)
	}
	err := q.All(objects)
	return err
}

//Update provides Update Operation for Database
func (db *MongoDB) Update(collection string, query, updatedItem interface{}, UpdateAll bool) error {
	s, c := db.collection(collection)
	defer s.Close()
	var err error
	if UpdateAll {
		_, err = c.UpdateAll(query, bson.M{&quot;$set&quot;: updatedItem})
	} else {
		err = c.Update(query, updatedItem)
	}
	return err
}

//Delete provides Delete Operation for Database
func (db *MongoDB) Delete(collection string, query interface{}, RemoveAll bool) error {
	s, c := db.collection(collection)
	defer s.Close()
	var err error
	if RemoveAll {
		_, err = c.RemoveAll(query)
		return err
	}
	err = c.Remove(query)
	return err
}

//DropDatabase drop the database
func (db *MongoDB) dropDatabase() error {
	return db.session.DB(Config.Database).DropDatabase()
}

//Below two functions are for the mongodb aggregate function

//AggGet is the aggregate pipe function for mongo db, it takes an bson.M arrary query and assign one item to object.
func (db *MongoDB) AggGet(table string, object interface{}, queries ...bson.M) error {
	s, c := db.collection(table)
	defer s.Close()
	err := c.Pipe(queries).One(object)
	return err
}

//AggGetAll is the aggregate pipe function for mongo db, it takes an bson.M arrary query and assign an arrary to the objects
func (db *MongoDB) AggGetAll(table string, objects interface{}, queries ...bson.M) error {
	s, c := db.collection(table)
	defer s.Close()
	err := c.Pipe(queries).All(objects)
	return err
}
</code></pre>
<p>Now we have the CRUD, but we still need to have some fucntion to help simplify the the MongoDB query, so I created below functions. These functions are the implementation of the MongoDB operations that you can find on MongoDB website(The names of the functions matches the name of the operations. For example In is $in).</p>
<pre><code class="language-go">//QueryHelper is query helper struct for mongo DB, this is purely for better organisations
type QueryHelper struct{}

//MgoQry is a public exposed functions for buildding different querys
var MgoQry QueryHelper

//Bson returns a bson.M key value pair
func (query *QueryHelper) Bson(key string, value interface{}) bson.M {
	return bson.M{key: value}
}

//Bsons returns multiple bson.M key value pairs
func (query *QueryHelper) Bsons(keyValuePairs map[string]interface{}) bson.M {
	qry := bson.M{}
	for key, value := range keyValuePairs {
		qry[key] = value
	}
	return qry
}

//All will match all queies in arrary
func (query *QueryHelper) All(values ...interface{}) bson.M {
	return query.Bson(&quot;$all&quot;, values)
}

//In will match any queries in arrary
func (query *QueryHelper) In(values ...interface{}) bson.M {
	return query.Bson(&quot;$in&quot;, values)
}

//Nin will match anything other than the queies in arrary
func (query *QueryHelper) Nin(values ...interface{}) bson.M {
	return query.Bson(&quot;$nin&quot;, values)
}

//Eq matches equale comparison
func (query *QueryHelper) Eq(value interface{}) bson.M {
	return query.Bson(&quot;$eq&quot;, value)
}

//Gt matches greater comparison
func (query *QueryHelper) Gt(value interface{}) bson.M {
	return query.Bson(&quot;$gt&quot;, value)
}

//Gte matches greater or equal comparison
func (query *QueryHelper) Gte(value interface{}) bson.M {
	return query.Bson(&quot;$gte&quot;, value)
}

//Lt matches less comparison
func (query *QueryHelper) Lt(value interface{}) bson.M {
	return query.Bson(&quot;$lt&quot;, value)
}

//Lte matches less or equal comparison
func (query *QueryHelper) Lte(value interface{}) bson.M {
	return query.Bson(&quot;$lte&quot;, value)
}

//And provides and relationship
func (query *QueryHelper) And(queries ...interface{}) bson.M {
	return query.Bson(&quot;$and&quot;, queries)
}

//Or provides and relationship
func (query *QueryHelper) Or(values ...interface{}) bson.M {
	return query.Bson(&quot;$Or&quot;, values)
}

//Not provides NOT relationship
func (query *QueryHelper) Not(value interface{}) bson.M {
	return query.Bson(&quot;$not&quot;, value)
}

//Nor provides NOR relationship
func (query *QueryHelper) Nor(values ...interface{}) bson.M {
	return query.Bson(&quot;$nor&quot;, values)
}

//Slice sets the item skip and limit of the query
func (query *QueryHelper) Slice(skip, limit int) bson.M {
	return query.Bson(&quot;$slice&quot;, []int{skip, limit})
}

//Select takes fields name and returns the &quot;filenames&quot;:&quot;1&quot; to select the input fields
func (query *QueryHelper) Select(isSelect bool, values ...string) bson.M {
	selector := bson.M{}
	for _, value := range values {
		selector[value] = isSelect
	}
	return selector
}

//Match returns the bson.M for $match operation, this is for aggregation queries only
func (query *QueryHelper) Match(qry interface{}) bson.M {
	return query.Bson(&quot;$match&quot;, qry)
}

//Limit returns the bson.M for $limit operation, this is for aggregation queries only
func (query *QueryHelper) Limit(maxReturn int) bson.M {
	return query.Bson(&quot;$limit&quot;, maxReturn)
}

//Sort returns the bson.M for $sort operation, it takes only one fields, this is for aggregation queries only
func (query *QueryHelper) Sort(field string, isDescending bool) bson.M {
	order := 1
	if isDescending {
		// 1 is ascending and -1 is descending
		order = -1
	}
	return query.Bson(&quot;$sort&quot;, query.Bson(field, order))
}

//Sorts returns the bson.M for $sort operation, it takes multiple key value pairs, this is for aggregation queries only
//Use field name as key and 1/-1 in the value,1 is ascending and -1 is descending
func (query *QueryHelper) Sorts(keyValuePairs map[string]interface{}) bson.M {
	return query.Bson(&quot;$sort&quot;, query.Bsons(keyValuePairs))
}

//Project returns the bson.M for $project operation which sets the selected fields in SQL, this is for aggregation queries only
func (query *QueryHelper) Project(qry interface{}) bson.M {
	return query.Bson(&quot;$project&quot;, qry)
}

//LookUp returns the bson.M for $lookup operation, this is for aggregation queries only
func (query *QueryHelper) LookUp(from, localField, foreignField, as string) bson.M {
	qry := make(map[string]interface{})
	qry[&quot;from&quot;] = from
	qry[&quot;localField&quot;] = localField
	qry[&quot;foreignField&quot;] = foreignField
	qry[&quot;as&quot;] = as
	return query.Bson(&quot;$lookup&quot;, query.Bsons(qry))
}
</code></pre>
<p>How to use in an object call user:</p>
<pre><code class="language-go">//Some basic structs

//User struct, Roles is an arrary to store the data from Role strcut, it will not
//be saved to the database. The RoleIds will be saved into the database.
//Please ensure the Roles is empty before running insert or update.
type User struct {
	ID          bson.ObjectId `bson:&quot;_id,omitempty&quot;`
	Email       string        `bson:&quot;email,omitempty&quot;`
	Password    string        `bson:&quot;password,omitempty&quot;`
	Name        string        `bson:&quot;name,omitempty&quot;`
	RoleIds     []bson.ObjectId `bson:&quot;roleIds,omitempty&quot;`
	Roles       []Role          `bson:&quot;roles,omitempty&quot;`
}

type Role struct {
	ID   bson.ObjectId `bson:&quot;_id,omitempty&quot;`
	Name string        `bson:&quot;name&quot;`
}

//userCollection is the collection name for Model User in mongo db
const userCollection = &quot;user&quot;

//Resources is the db
var Resources MongoDB

//Get Users by unning a query
func GetUsers() (error) {
    //Initiate the database, the variable Config.XX is a custom strcut that are reading configuration from json file
	Resources, _ = NewMongoDB(Config.Host, Config.Database, Config.Username, Config.Password, Config.DropDB)

	var usersA []User
    var usersB []User

    //build mongo query, it means roles.name that does not contain Admin
	qry := MgoQry.And(MgoQry.Bson(&quot;roles.name&quot;, MgoQry.Nin(&quot;Admin&quot;)))


	err := Resources.GetAll(userCollection, &amp;usersA, qry, func(query *mgo.Query) *mgo.Query {
        //This is the implementation of the hook function to select only email field
		return query.Select(MgoQry.Select(&quot;email&quot;))
	})
    
    //below is aggregate operation in mongodb

    //filter query
    filter := MgoQry.And(MgoQry.Bson(&quot;roles.name&quot;, &quot;Admin&quot;))

    //aggregate query will be execute in mongodb in order, see official mongo db document for more information
	err := Resources.AggGetAll(userCollection, &amp;usersB,
        //below are the aggregate queries
		MgoQry.LookUp(&quot;role&quot;, &quot;roleIds&quot;, &quot;_id&quot;, &quot;roles&quot;),
		MgoQry.Match(filter),
		MgoQry.Project(common.MgoQry.Select(true, &quot;email&quot;, &quot;_id&quot;)))

	return err
}
</code></pre>
<p>Above is the example of using GetAll with hook, you can use the same way to implement Get, Delete, Update etc...</p>
]]></content>
    </entry>
</feed>